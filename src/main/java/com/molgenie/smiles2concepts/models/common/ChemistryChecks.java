/*
* Copyright MolGenie GmbH, 
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
*/
package com.molgenie.smiles2concepts.models.common;

import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.actelion.research.chem.CanonizerUtil;
import com.actelion.research.chem.ExtendedMolecule;
import com.actelion.research.chem.IsomericSmilesCreator;
import com.actelion.research.chem.Molecule;
import com.actelion.research.chem.MoleculeStandardizer;
import com.actelion.research.chem.SSSearcher;
import com.actelion.research.chem.SmilesParser;
import com.actelion.research.chem.StereoMolecule;
import com.molgenie.openchemlib.StructureCalculator;

public record ChemistryChecks( String _smiles ) {
	private static final Logger log = LoggerFactory.getLogger(ChemistryChecks.class);
	
	private final static String PAT_ISOTOPE_ATOM_STR = "\\[([0-9]++([a-zA-Z])[a-z]?+)";
	private final static Pattern PAT_ISOTOPE_ATOM = Pattern.compile( PAT_ISOTOPE_ATOM_STR );
	private final static String PAT_0_STR = "\\[se\\+]";
	private final static String PAT_1_STR = "\\[se]";
	private final static String PAT_2_STR = "[NSRTYPD][b]";
	private final static String PAT_3_STR = "\\[cl]";
	private final static String PAT_4_STR = "o=";
	private final static String PAT_5_STR = "=o";
	private final static Pattern PAT_0 = Pattern.compile( PAT_0_STR );
	private final static Pattern PAT_1 = Pattern.compile( PAT_1_STR );
	private final static Pattern PAT_2 = Pattern.compile( PAT_2_STR );
	private final static Pattern PAT_3 = Pattern.compile( PAT_3_STR );
	private final static Pattern PAT_4 = Pattern.compile( PAT_4_STR );
	private final static Pattern PAT_5 = Pattern.compile( PAT_5_STR );
	static StructureCalculator sCalc = new StructureCalculator();
	static String[] fragments = new String[]{ "C12CCC1CC2","O1OOO1" };

	public static String checkMolecule(String _smiles) {
		String ssmiles = null;
		String flag = null;
		String idCode = null;
		StereoMolecule mol = new StereoMolecule();
		
		try {
			_smiles = correctAtoms( _smiles );
			flag = flagIsotopes( _smiles );
			if ( flag.length() >0 ) {
				String newSmiles1 = correctIsotopes( _smiles );
				if ( !newSmiles1.equals( _smiles ) ) _smiles = newSmiles1;
			}
		} catch (Exception e) {
			log.error("Failed flag isotopes for smiles", e);
			return null;
		}
		
		boolean forbiddenMol = false;
		try {
			if ( _smiles.contains("*") ) {
				String smiles = _smiles.replaceAll("\\*","[Fr]");
				mol = smilesParseMolecule( smiles );
				flag = testValencies( mol, true, true );
				//System.out.println("valenz: "+ smiles+" "+flag);
				if ( flag.length() >1 ) forbiddenMol = true;
				else mol = correctClass( mol );
				if ( mol.getMolweight() > 1000) forbiddenMol = true;
			} else {
				mol = smilesParseMolecule( _smiles );
				flag = testValencies( mol, true, true );
				if ( flag.length() >1 ) forbiddenMol = true;
				if ( mol.getMolweight() > 2000) forbiddenMol = true;
				else {
					forbiddenMol = checkCompound( mol );
					if ( !forbiddenMol ) {
						SSSearcher searcher = new SSSearcher();
				        searcher.setMolecule( mol );
				        for ( String frag : fragments ) {
				        	StereoMolecule fragmentMol = smilesParseMolecule( frag );
				            fragmentMol.setFragment( true );
				        	searcher.setFragment( fragmentMol );
				        	if ( searcher.isFragmentInMolecule() ) forbiddenMol = true;
				        }
					}
				}
			}
			if ( !forbiddenMol ) {
				MoleculeStandardizer_LW.standardize( mol, 0 );
				idCode = mol.getIDCode();
			} else return null;
			
		} catch (Exception e1) {
			log.error("Failed to standardize smiles ", e1);
			return null;
		}	
		return idCode;
	}
	
	public static StereoMolecule smilesParseMolecule( String _smiles ) {
		StereoMolecule mol = new StereoMolecule();
		try {
			int mode = SmilesParser.SMARTS_MODE_IS_SMILES | SmilesParser.MODE_SKIP_COORDINATE_TEMPLATES;
			SmilesParser smilesP = new SmilesParser( mode, false );
			smilesP.parse( mol, _smiles.getBytes());
		} catch (Exception e3) {
			log.error( "Failed to parse smiles "+_smiles );
			return null;
		}
		return mol;
	}
	
	private static String testValencies( StereoMolecule _mol, 
            boolean _reportAbnormalvalent,
            boolean _reportFirstOnly ) {

		String flag = "";
		_mol.ensureHelperArrays( Molecule.cHelperNeighbours );

		for ( int atom = 0, aCount = _mol.getAtoms(); atom < aCount; atom++ ) {

			if ( _mol.getOccupiedValence( atom ) > _mol.getMaxValence( atom ) ) {

				boolean skip = false;

				final String atomLabel = _mol.getAtomLabel( atom );
				final int connAtomsCount = _mol.getConnAtoms( atom );
				
				// case for diborane
				if ( ( connAtomsCount == 2 ) && "H".equals( atomLabel ) ) {
					if ( hasConnectedAtom( _mol, atom, 0, "B", 1 ) &&
						 hasConnectedAtom( _mol, atom, 1, "B", 1 ) ) {
						skip = true;
					}
				// case for carbon monoxide
				} else if ( ( connAtomsCount == 1 ) && "O".equals( atomLabel ) ) {
					if ( hasConnectedAtom( _mol, atom, 0, "C", 3 ) ) {
						skip = true;
					}
				} 

				if ( !skip ) flag += atomLabel + " hypervalent; ";

			} else if ( _mol.getAtomAbnormalValence( atom ) > 0 ) {

				final String atomLabel = _mol.getAtomLabel( atom );
				final int connAtomsCount = _mol.getConnAtoms( atom );
				final int atomCharge = _mol.getAtomCharge( atom );
				
				if ( "C".equals( atomLabel ) ) {
					flag += "C hypervalent; ";
			
				// case for quartery N atom with 3 partners, without positive charge	
				} else if ( "N".equals( atomLabel ) && ( connAtomsCount == 3 ) && ( atomCharge == 0 ) ) {
					flag += "N hypervalent; ";
				} 
				
				if ( _reportAbnormalvalent ) {
					flag += atomLabel + " abnormalvalent; "; 
				}
				
			}

			if ( _reportFirstOnly && ( ! flag.isEmpty() ) ) {
				break;
			}
		}  // for atom

		return flag;
	}
	
	private final static boolean hasConnectedAtom( StereoMolecule _mol, int _baseAtom, 
            int _baseAtomConnectionIdx,
            String _requiredConnAtomLabel, 
            int _requiredBondOrder ) {

		final int connAtom = _mol.getConnAtom( _baseAtom, _baseAtomConnectionIdx );
		
		if ( _requiredConnAtomLabel.equals( _mol.getAtomLabel( connAtom ) ) ) {
			return _requiredBondOrder == _mol.getBondOrder( _mol.getBond( connAtom, _baseAtom ) );
		}
		
		return false;
	}
	
	private final static String flagIsotopes( String _smiles ) {
		Matcher m1 = PAT_ISOTOPE_ATOM.matcher( _smiles );
		while ( m1.find() ) {
			String atomStr = m1.group( 1 );
		    char   firstLetter = m1.group( 2 ).charAt( 0 );
		    if ( firstLetter > 'Z' ) {
		    	int chIdx = atomStr.indexOf( firstLetter );
		    	atomStr = atomStr.substring( 0, chIdx ) + (char) ( firstLetter - 32 ) +
	       	          atomStr.substring( chIdx + 1 );
		    }
		    if ( ! ISOTOPES.containsKey( atomStr ) ) {
		    	return "wrong isotope: " + m1.group(1);
		    }
		}
		return "";	
	}
	
	private final static HashMap<String,String> ISOTOPES = new HashMap<String,String>() {  
	    private static final long serialVersionUID = -6099346237939880304L; {
			put("1H", "[1H]");
			put("2H", "[2H]");
			put("3H", "[3H]");
			put("4H", "[4H]");
			put("5H", "[5H]");
			put("6H", "[6H]");
			put("7H", "[7H]");
			put("2He", "[2He]");
			put("3He", "[3He]");
			put("4He", "[4He]");
			put("5He", "[5He]");
			put("6He", "[6He]");
			put("7He", "[7He]");
			put("8He", "[8He]");
			put("9He", "[9He]");
			put("10He", "[10He]");
			put("3Li", "[3Li]");
			put("4Li", "[4Li]");
			put("5Li", "[5Li]");
			put("6Li", "[6Li]");
			put("7Li", "[7Li]");
			put("8Li", "[8Li]");
			put("9Li", "[9Li]");
			put("10Li", "[10Li]");
			put("11Li", "[11Li]");
			put("12Li", "[12Li]");
			put("5Be", "[5Be]");
			put("6Be", "[6Be]");
			put("7Be", "[7Be]");
			put("8Be", "[8Be]");
			put("9Be", "[9Be]");
			put("10Be", "[10Be]");
			put("11Be", "[11Be]");
			put("12Be", "[12Be]");
			put("13Be", "[13Be]");
			put("14Be", "[14Be]");
			put("15Be", "[15Be]");
			put("16Be", "[16Be]");
			put("6B", "[6B]");
			put("7B", "[7B]");
			put("8B", "[8B]");
			put("9B", "[9B]");
			put("10B", "[10B]");
			put("11B", "[11B]");
			put("12B", "[12B]");
			put("13B", "[13B]");
			put("14B", "[14B]");
			put("15B", "[15B]");
			put("16B", "[16B]");
			put("17B", "[17B]");
			put("18B", "[18B]");
			put("19B", "[19B]");
			put("8C", "[8C]");
			put("9C", "[9C]");
			put("10C", "[10C]");
			put("11C", "[11C]");
			put("12C", "[12C]");
			put("13C", "[13C]");
			put("14C", "[14C]");
			put("15C", "[15C]");
			put("16C", "[16C]");
			put("17C", "[17C]");
			put("18C", "[18C]");
			put("19C", "[19C]");
			put("20C", "[20C]");
			put("21C", "[21C]");
			put("22C", "[22C]");
			put("10N", "[10N]");
			put("11N", "[11N]");
			put("12N", "[12N]");
			put("13N", "[13N]");
			put("14N", "[14N]");
			put("15N", "[15N]");
			put("16N", "[16N]");
			put("17N", "[17N]");
			put("18N", "[18N]");
			put("19N", "[19N]");
			put("20N", "[20N]");
			put("21N", "[21N]");
			put("22N", "[22N]");
			put("23N", "[23N]");
			put("24N", "[24N]");
			put("25N", "[25N]");
			put("12O", "[12O]");
			put("13O", "[13O]");
			put("14O", "[14O]");
			put("15O", "[15O]");
			put("16O", "[16O]");
			put("17O", "[17O]");
			put("18O", "[18O]");
			put("19O", "[19O]");
			put("20O", "[20O]");
			put("21O", "[21O]");
			put("22O", "[22O]");
			put("23O", "[23O]");
			put("24O", "[24O]");
			put("25O", "[25O]");
			put("26O", "[26O]");
			put("27O", "[27O]");
			put("28O", "[28O]");
			put("14F", "[14F]");
			put("15F", "[15F]");
			put("16F", "[16F]");
			put("17F", "[17F]");
			put("18F", "[18F]");
			put("19F", "[19F]");
			put("20F", "[20F]");
			put("21F", "[21F]");
			put("22F", "[22F]");
			put("23F", "[23F]");
			put("24F", "[24F]");
			put("25F", "[25F]");
			put("26F", "[26F]");
			put("27F", "[27F]");
			put("28F", "[28F]");
			put("29F", "[29F]");
			put("30F", "[30F]");
			put("31F", "[31F]");
			put("16Ne", "[16Ne]");
			put("17Ne", "[17Ne]");
			put("18Ne", "[18Ne]");
			put("19Ne", "[19Ne]");
			put("20Ne", "[20Ne]");
			put("21Ne", "[21Ne]");
			put("22Ne", "[22Ne]");
			put("23Ne", "[23Ne]");
			put("24Ne", "[24Ne]");
			put("25Ne", "[25Ne]");
			put("26Ne", "[26Ne]");
			put("27Ne", "[27Ne]");
			put("28Ne", "[28Ne]");
			put("29Ne", "[29Ne]");
			put("30Ne", "[30Ne]");
			put("31Ne", "[31Ne]");
			put("32Ne", "[32Ne]");
			put("33Ne", "[33Ne]");
			put("34Ne", "[34Ne]");
			put("18Na", "[18Na]");
			put("19Na", "[19Na]");
			put("20Na", "[20Na]");
			put("21Na", "[21Na]");
			put("22Na", "[22Na]");
			put("23Na", "[23Na]");
			put("24Na", "[24Na]");
			put("25Na", "[25Na]");
			put("26Na", "[26Na]");
			put("27Na", "[27Na]");
			put("28Na", "[28Na]");
			put("29Na", "[29Na]");
			put("30Na", "[30Na]");
			put("31Na", "[31Na]");
			put("32Na", "[32Na]");
			put("33Na", "[33Na]");
			put("34Na", "[34Na]");
			put("35Na", "[35Na]");
			put("36Na", "[36Na]");
			put("37Na", "[37Na]");
			put("19Mg", "[19Mg]");
			put("20Mg", "[20Mg]");
			put("21Mg", "[21Mg]");
			put("22Mg", "[22Mg]");
			put("23Mg", "[23Mg]");
			put("24Mg", "[24Mg]");
			put("25Mg", "[25Mg]");
			put("26Mg", "[26Mg]");
			put("27Mg", "[27Mg]");
			put("28Mg", "[28Mg]");
			put("29Mg", "[29Mg]");
			put("30Mg", "[30Mg]");
			put("31Mg", "[31Mg]");
			put("32Mg", "[32Mg]");
			put("33Mg", "[33Mg]");
			put("34Mg", "[34Mg]");
			put("35Mg", "[35Mg]");
			put("36Mg", "[36Mg]");
			put("37Mg", "[37Mg]");
			put("38Mg", "[38Mg]");
			put("39Mg", "[39Mg]");
			put("40Mg", "[40Mg]");
			put("21Al", "[21Al]");
			put("22Al", "[22Al]");
			put("23Al", "[23Al]");
			put("24Al", "[24Al]");
			put("25Al", "[25Al]");
			put("26Al", "[26Al]");
			put("27Al", "[27Al]");
			put("28Al", "[28Al]");
			put("29Al", "[29Al]");
			put("30Al", "[30Al]");
			put("31Al", "[31Al]");
			put("32Al", "[32Al]");
			put("33Al", "[33Al]");
			put("34Al", "[34Al]");
			put("35Al", "[35Al]");
			put("36Al", "[36Al]");
			put("37Al", "[37Al]");
			put("38Al", "[38Al]");
			put("39Al", "[39Al]");
			put("40Al", "[40Al]");
			put("41Al", "[41Al]");
			put("42Al", "[42Al]");
			put("22Si", "[22Si]");
			put("23Si", "[23Si]");
			put("24Si", "[24Si]");
			put("25Si", "[25Si]");
			put("26Si", "[26Si]");
			put("27Si", "[27Si]");
			put("28Si", "[28Si]");
			put("29Si", "[29Si]");
			put("30Si", "[30Si]");
			put("31Si", "[31Si]");
			put("32Si", "[32Si]");
			put("33Si", "[33Si]");
			put("34Si", "[34Si]");
			put("35Si", "[35Si]");
			put("36Si", "[36Si]");
			put("37Si", "[37Si]");
			put("38Si", "[38Si]");
			put("39Si", "[39Si]");
			put("40Si", "[40Si]");
			put("41Si", "[41Si]");
			put("42Si", "[42Si]");
			put("43Si", "[43Si]");
			put("44Si", "[44Si]");
			put("24P", "[24P]");
			put("25P", "[25P]");
			put("26P", "[26P]");
			put("27P", "[27P]");
			put("28P", "[28P]");
			put("29P", "[29P]");
			put("30P", "[30P]");
			put("31P", "[31P]");
			put("32P", "[32P]");
			put("33P", "[33P]");
			put("34P", "[34P]");
			put("35P", "[35P]");
			put("36P", "[36P]");
			put("37P", "[37P]");
			put("38P", "[38P]");
			put("39P", "[39P]");
			put("40P", "[40P]");
			put("41P", "[41P]");
			put("42P", "[42P]");
			put("43P", "[43P]");
			put("44P", "[44P]");
			put("45P", "[45P]");
			put("46P", "[46P]");
			put("26S", "[26S]");
			put("27S", "[27S]");
			put("28S", "[28S]");
			put("29S", "[29S]");
			put("30S", "[30S]");
			put("31S", "[31S]");
			put("32S", "[32S]");
			put("33S", "[33S]");
			put("34S", "[34S]");
			put("35S", "[35S]");
			put("36S", "[36S]");
			put("37S", "[37S]");
			put("38S", "[38S]");
			put("39S", "[39S]");
			put("40S", "[40S]");
			put("41S", "[41S]");
			put("42S", "[42S]");
			put("43S", "[43S]");
			put("44S", "[44S]");
			put("45S", "[45S]");
			put("46S", "[46S]");
			put("47S", "[47S]");
			put("48S", "[48S]");
			put("49S", "[49S]");
			put("28Cl", "[28Cl]");
			put("29Cl", "[29Cl]");
			put("30Cl", "[30Cl]");
			put("31Cl", "[31Cl]");
			put("32Cl", "[32Cl]");
			put("33Cl", "[33Cl]");
			put("34Cl", "[34Cl]");
			put("35Cl", "[35Cl]");
			put("36Cl", "[36Cl]");
			put("37Cl", "[37Cl]");
			put("38Cl", "[38Cl]");
			put("39Cl", "[39Cl]");
			put("40Cl", "[40Cl]");
			put("41Cl", "[41Cl]");
			put("42Cl", "[42Cl]");
			put("43Cl", "[43Cl]");
			put("44Cl", "[44Cl]");
			put("45Cl", "[45Cl]");
			put("46Cl", "[46Cl]");
			put("47Cl", "[47Cl]");
			put("48Cl", "[48Cl]");
			put("49Cl", "[49Cl]");
			put("50Cl", "[50Cl]");
			put("51Cl", "[51Cl]");
			put("30Ar", "[30Ar]");
			put("31Ar", "[31Ar]");
			put("32Ar", "[32Ar]");
			put("33Ar", "[33Ar]");
			put("34Ar", "[34Ar]");
			put("35Ar", "[35Ar]");
			put("36Ar", "[36Ar]");
			put("37Ar", "[37Ar]");
			put("38Ar", "[38Ar]");
			put("39Ar", "[39Ar]");
			put("40Ar", "[40Ar]");
			put("41Ar", "[41Ar]");
			put("42Ar", "[42Ar]");
			put("43Ar", "[43Ar]");
			put("44Ar", "[44Ar]");
			put("45Ar", "[45Ar]");
			put("46Ar", "[46Ar]");
			put("47Ar", "[47Ar]");
			put("48Ar", "[48Ar]");
			put("49Ar", "[49Ar]");
			put("50Ar", "[50Ar]");
			put("51Ar", "[51Ar]");
			put("52Ar", "[52Ar]");
			put("53Ar", "[53Ar]");
			put("32K", "[32K]");
			put("33K", "[33K]");
			put("34K", "[34K]");
			put("35K", "[35K]");
			put("36K", "[36K]");
			put("37K", "[37K]");
			put("38K", "[38K]");
			put("39K", "[39K]");
			put("40K", "[40K]");
			put("41K", "[41K]");
			put("42K", "[42K]");
			put("43K", "[43K]");
			put("44K", "[44K]");
			put("45K", "[45K]");
			put("46K", "[46K]");
			put("47K", "[47K]");
			put("48K", "[48K]");
			put("49K", "[49K]");
			put("50K", "[50K]");
			put("51K", "[51K]");
			put("52K", "[52K]");
			put("53K", "[53K]");
			put("54K", "[54K]");
			put("55K", "[55K]");
			put("34Ca", "[34Ca]");
			put("35Ca", "[35Ca]");
			put("36Ca", "[36Ca]");
			put("37Ca", "[37Ca]");
			put("38Ca", "[38Ca]");
			put("39Ca", "[39Ca]");
			put("40Ca", "[40Ca]");
			put("41Ca", "[41Ca]");
			put("42Ca", "[42Ca]");
			put("43Ca", "[43Ca]");
			put("44Ca", "[44Ca]");
			put("45Ca", "[45Ca]");
			put("46Ca", "[46Ca]");
			put("47Ca", "[47Ca]");
			put("48Ca", "[48Ca]");
			put("49Ca", "[49Ca]");
			put("50Ca", "[50Ca]");
			put("51Ca", "[51Ca]");
			put("52Ca", "[52Ca]");
			put("53Ca", "[53Ca]");
			put("54Ca", "[54Ca]");
			put("55Ca", "[55Ca]");
			put("56Ca", "[56Ca]");
			put("57Ca", "[57Ca]");
			put("36Sc", "[36Sc]");
			put("37Sc", "[37Sc]");
			put("38Sc", "[38Sc]");
			put("39Sc", "[39Sc]");
			put("40Sc", "[40Sc]");
			put("41Sc", "[41Sc]");
			put("42Sc", "[42Sc]");
			put("43Sc", "[43Sc]");
			put("44Sc", "[44Sc]");
			put("45Sc", "[45Sc]");
			put("46Sc", "[46Sc]");
			put("47Sc", "[47Sc]");
			put("48Sc", "[48Sc]");
			put("49Sc", "[49Sc]");
			put("50Sc", "[50Sc]");
			put("51Sc", "[51Sc]");
			put("52Sc", "[52Sc]");
			put("53Sc", "[53Sc]");
			put("54Sc", "[54Sc]");
			put("55Sc", "[55Sc]");
			put("56Sc", "[56Sc]");
			put("57Sc", "[57Sc]");
			put("58Sc", "[58Sc]");
			put("59Sc", "[59Sc]");
			put("60Sc", "[60Sc]");
			put("38Ti", "[38Ti]");
			put("39Ti", "[39Ti]");
			put("40Ti", "[40Ti]");
			put("41Ti", "[41Ti]");
			put("42Ti", "[42Ti]");
			put("43Ti", "[43Ti]");
			put("44Ti", "[44Ti]");
			put("45Ti", "[45Ti]");
			put("46Ti", "[46Ti]");
			put("47Ti", "[47Ti]");
			put("48Ti", "[48Ti]");
			put("49Ti", "[49Ti]");
			put("50Ti", "[50Ti]");
			put("51Ti", "[51Ti]");
			put("52Ti", "[52Ti]");
			put("53Ti", "[53Ti]");
			put("54Ti", "[54Ti]");
			put("55Ti", "[55Ti]");
			put("56Ti", "[56Ti]");
			put("57Ti", "[57Ti]");
			put("58Ti", "[58Ti]");
			put("59Ti", "[59Ti]");
			put("60Ti", "[60Ti]");
			put("61Ti", "[61Ti]");
			put("62Ti", "[62Ti]");
			put("63Ti", "[63Ti]");
			put("40V", "[40V]");
			put("41V", "[41V]");
			put("42V", "[42V]");
			put("43V", "[43V]");
			put("44V", "[44V]");
			put("45V", "[45V]");
			put("46V", "[46V]");
			put("47V", "[47V]");
			put("48V", "[48V]");
			put("49V", "[49V]");
			put("50V", "[50V]");
			put("51V", "[51V]");
			put("52V", "[52V]");
			put("53V", "[53V]");
			put("54V", "[54V]");
			put("55V", "[55V]");
			put("56V", "[56V]");
			put("57V", "[57V]");
			put("58V", "[58V]");
			put("59V", "[59V]");
			put("60V", "[60V]");
			put("61V", "[61V]");
			put("62V", "[62V]");
			put("63V", "[63V]");
			put("64V", "[64V]");
			put("65V", "[65V]");
			put("42Cr", "[42Cr]");
			put("43Cr", "[43Cr]");
			put("44Cr", "[44Cr]");
			put("45Cr", "[45Cr]");
			put("46Cr", "[46Cr]");
			put("47Cr", "[47Cr]");
			put("48Cr", "[48Cr]");
			put("49Cr", "[49Cr]");
			put("50Cr", "[50Cr]");
			put("51Cr", "[51Cr]");
			put("52Cr", "[52Cr]");
			put("53Cr", "[53Cr]");
			put("54Cr", "[54Cr]");
			put("55Cr", "[55Cr]");
			put("56Cr", "[56Cr]");
			put("57Cr", "[57Cr]");
			put("58Cr", "[58Cr]");
			put("59Cr", "[59Cr]");
			put("60Cr", "[60Cr]");
			put("61Cr", "[61Cr]");
			put("62Cr", "[62Cr]");
			put("63Cr", "[63Cr]");
			put("64Cr", "[64Cr]");
			put("65Cr", "[65Cr]");
			put("66Cr", "[66Cr]");
			put("67Cr", "[67Cr]");
			put("44Mn", "[44Mn]");
			put("45Mn", "[45Mn]");
			put("46Mn", "[46Mn]");
			put("47Mn", "[47Mn]");
			put("48Mn", "[48Mn]");
			put("49Mn", "[49Mn]");
			put("50Mn", "[50Mn]");
			put("51Mn", "[51Mn]");
			put("52Mn", "[52Mn]");
			put("53Mn", "[53Mn]");
			put("54Mn", "[54Mn]");
			put("55Mn", "[55Mn]");
			put("56Mn", "[56Mn]");
			put("57Mn", "[57Mn]");
			put("58Mn", "[58Mn]");
			put("59Mn", "[59Mn]");
			put("60Mn", "[60Mn]");
			put("61Mn", "[61Mn]");
			put("62Mn", "[62Mn]");
			put("63Mn", "[63Mn]");
			put("64Mn", "[64Mn]");
			put("65Mn", "[65Mn]");
			put("66Mn", "[66Mn]");
			put("67Mn", "[67Mn]");
			put("68Mn", "[68Mn]");
			put("69Mn", "[69Mn]");
			put("45Fe", "[45Fe]");
			put("46Fe", "[46Fe]");
			put("47Fe", "[47Fe]");
			put("48Fe", "[48Fe]");
			put("49Fe", "[49Fe]");
			put("50Fe", "[50Fe]");
			put("51Fe", "[51Fe]");
			put("52Fe", "[52Fe]");
			put("53Fe", "[53Fe]");
			put("54Fe", "[54Fe]");
			put("55Fe", "[55Fe]");
			put("56Fe", "[56Fe]");
			put("57Fe", "[57Fe]");
			put("58Fe", "[58Fe]");
			put("59Fe", "[59Fe]");
			put("60Fe", "[60Fe]");
			put("61Fe", "[61Fe]");
			put("62Fe", "[62Fe]");
			put("63Fe", "[63Fe]");
			put("64Fe", "[64Fe]");
			put("65Fe", "[65Fe]");
			put("66Fe", "[66Fe]");
			put("67Fe", "[67Fe]");
			put("68Fe", "[68Fe]");
			put("69Fe", "[69Fe]");
			put("70Fe", "[70Fe]");
			put("71Fe", "[71Fe]");
			put("72Fe", "[72Fe]");
			put("47Co", "[47Co]");
			put("48Co", "[48Co]");
			put("49Co", "[49Co]");
			put("50Co", "[50Co]");
			put("51Co", "[51Co]");
			put("52Co", "[52Co]");
			put("53Co", "[53Co]");
			put("54Co", "[54Co]");
			put("55Co", "[55Co]");
			put("56Co", "[56Co]");
			put("57Co", "[57Co]");
			put("58Co", "[58Co]");
			put("59Co", "[59Co]");
			put("60Co", "[60Co]");
			put("61Co", "[61Co]");
			put("62Co", "[62Co]");
			put("63Co", "[63Co]");
			put("64Co", "[64Co]");
			put("65Co", "[65Co]");
			put("66Co", "[66Co]");
			put("67Co", "[67Co]");
			put("68Co", "[68Co]");
			put("69Co", "[69Co]");
			put("70Co", "[70Co]");
			put("71Co", "[71Co]");
			put("72Co", "[72Co]");
			put("73Co", "[73Co]");
			put("74Co", "[74Co]");
			put("75Co", "[75Co]");
			put("48Ni", "[48Ni]");
			put("49Ni", "[49Ni]");
			put("50Ni", "[50Ni]");
			put("51Ni", "[51Ni]");
			put("52Ni", "[52Ni]");
			put("53Ni", "[53Ni]");
			put("54Ni", "[54Ni]");
			put("55Ni", "[55Ni]");
			put("56Ni", "[56Ni]");
			put("57Ni", "[57Ni]");
			put("58Ni", "[58Ni]");
			put("59Ni", "[59Ni]");
			put("60Ni", "[60Ni]");
			put("61Ni", "[61Ni]");
			put("62Ni", "[62Ni]");
			put("63Ni", "[63Ni]");
			put("64Ni", "[64Ni]");
			put("65Ni", "[65Ni]");
			put("66Ni", "[66Ni]");
			put("67Ni", "[67Ni]");
			put("68Ni", "[68Ni]");
			put("69Ni", "[69Ni]");
			put("70Ni", "[70Ni]");
			put("71Ni", "[71Ni]");
			put("72Ni", "[72Ni]");
			put("73Ni", "[73Ni]");
			put("74Ni", "[74Ni]");
			put("75Ni", "[75Ni]");
			put("76Ni", "[76Ni]");
			put("77Ni", "[77Ni]");
			put("78Ni", "[78Ni]");
			put("52Cu", "[52Cu]");
			put("53Cu", "[53Cu]");
			put("54Cu", "[54Cu]");
			put("55Cu", "[55Cu]");
			put("56Cu", "[56Cu]");
			put("57Cu", "[57Cu]");
			put("58Cu", "[58Cu]");
			put("59Cu", "[59Cu]");
			put("60Cu", "[60Cu]");
			put("61Cu", "[61Cu]");
			put("62Cu", "[62Cu]");
			put("63Cu", "[63Cu]");
			put("64Cu", "[64Cu]");
			put("65Cu", "[65Cu]");
			put("66Cu", "[66Cu]");
			put("67Cu", "[67Cu]");
			put("68Cu", "[68Cu]");
			put("69Cu", "[69Cu]");
			put("70Cu", "[70Cu]");
			put("71Cu", "[71Cu]");
			put("72Cu", "[72Cu]");
			put("73Cu", "[73Cu]");
			put("74Cu", "[74Cu]");
			put("75Cu", "[75Cu]");
			put("76Cu", "[76Cu]");
			put("77Cu", "[77Cu]");
			put("78Cu", "[78Cu]");
			put("79Cu", "[79Cu]");
			put("80Cu", "[80Cu]");
			put("54Zn", "[54Zn]");
			put("55Zn", "[55Zn]");
			put("56Zn", "[56Zn]");
			put("57Zn", "[57Zn]");
			put("58Zn", "[58Zn]");
			put("59Zn", "[59Zn]");
			put("60Zn", "[60Zn]");
			put("61Zn", "[61Zn]");
			put("62Zn", "[62Zn]");
			put("63Zn", "[63Zn]");
			put("64Zn", "[64Zn]");
			put("65Zn", "[65Zn]");
			put("66Zn", "[66Zn]");
			put("67Zn", "[67Zn]");
			put("68Zn", "[68Zn]");
			put("69Zn", "[69Zn]");
			put("70Zn", "[70Zn]");
			put("71Zn", "[71Zn]");
			put("72Zn", "[72Zn]");
			put("73Zn", "[73Zn]");
			put("74Zn", "[74Zn]");
			put("75Zn", "[75Zn]");
			put("76Zn", "[76Zn]");
			put("77Zn", "[77Zn]");
			put("78Zn", "[78Zn]");
			put("79Zn", "[79Zn]");
			put("80Zn", "[80Zn]");
			put("81Zn", "[81Zn]");
			put("82Zn", "[82Zn]");
			put("83Zn", "[83Zn]");
			put("56Ga", "[56Ga]");
			put("57Ga", "[57Ga]");
			put("58Ga", "[58Ga]");
			put("59Ga", "[59Ga]");
			put("60Ga", "[60Ga]");
			put("61Ga", "[61Ga]");
			put("62Ga", "[62Ga]");
			put("63Ga", "[63Ga]");
			put("64Ga", "[64Ga]");
			put("65Ga", "[65Ga]");
			put("66Ga", "[66Ga]");
			put("67Ga", "[67Ga]");
			put("68Ga", "[68Ga]");
			put("69Ga", "[69Ga]");
			put("70Ga", "[70Ga]");
			put("71Ga", "[71Ga]");
			put("72Ga", "[72Ga]");
			put("73Ga", "[73Ga]");
			put("74Ga", "[74Ga]");
			put("75Ga", "[75Ga]");
			put("76Ga", "[76Ga]");
			put("77Ga", "[77Ga]");
			put("78Ga", "[78Ga]");
			put("79Ga", "[79Ga]");
			put("80Ga", "[80Ga]");
			put("81Ga", "[81Ga]");
			put("82Ga", "[82Ga]");
			put("83Ga", "[83Ga]");
			put("84Ga", "[84Ga]");
			put("85Ga", "[85Ga]");
			put("86Ga", "[86Ga]");
			put("58Ge", "[58Ge]");
			put("59Ge", "[59Ge]");
			put("60Ge", "[60Ge]");
			put("61Ge", "[61Ge]");
			put("62Ge", "[62Ge]");
			put("63Ge", "[63Ge]");
			put("64Ge", "[64Ge]");
			put("65Ge", "[65Ge]");
			put("66Ge", "[66Ge]");
			put("67Ge", "[67Ge]");
			put("68Ge", "[68Ge]");
			put("69Ge", "[69Ge]");
			put("70Ge", "[70Ge]");
			put("71Ge", "[71Ge]");
			put("72Ge", "[72Ge]");
			put("73Ge", "[73Ge]");
			put("74Ge", "[74Ge]");
			put("75Ge", "[75Ge]");
			put("76Ge", "[76Ge]");
			put("77Ge", "[77Ge]");
			put("78Ge", "[78Ge]");
			put("79Ge", "[79Ge]");
			put("80Ge", "[80Ge]");
			put("81Ge", "[81Ge]");
			put("82Ge", "[82Ge]");
			put("83Ge", "[83Ge]");
			put("84Ge", "[84Ge]");
			put("85Ge", "[85Ge]");
			put("86Ge", "[86Ge]");
			put("87Ge", "[87Ge]");
			put("88Ge", "[88Ge]");
			put("89Ge", "[89Ge]");
			put("60As", "[60As]");
			put("61As", "[61As]");
			put("62As", "[62As]");
			put("63As", "[63As]");
			put("64As", "[64As]");
			put("65As", "[65As]");
			put("66As", "[66As]");
			put("67As", "[67As]");
			put("68As", "[68As]");
			put("69As", "[69As]");
			put("70As", "[70As]");
			put("71As", "[71As]");
			put("72As", "[72As]");
			put("73As", "[73As]");
			put("74As", "[74As]");
			put("75As", "[75As]");
			put("76As", "[76As]");
			put("77As", "[77As]");
			put("78As", "[78As]");
			put("79As", "[79As]");
			put("80As", "[80As]");
			put("81As", "[81As]");
			put("82As", "[82As]");
			put("83As", "[83As]");
			put("84As", "[84As]");
			put("85As", "[85As]");
			put("86As", "[86As]");
			put("87As", "[87As]");
			put("88As", "[88As]");
			put("89As", "[89As]");
			put("90As", "[90As]");
			put("91As", "[91As]");
			put("92As", "[92As]");
			put("65Se", "[65Se]");
			put("66Se", "[66Se]");
			put("67Se", "[67Se]");
			put("68Se", "[68Se]");
			put("69Se", "[69Se]");
			put("70Se", "[70Se]");
			put("71Se", "[71Se]");
			put("72Se", "[72Se]");
			put("73Se", "[73Se]");
			put("74Se", "[74Se]");
			put("75Se", "[75Se]");
			put("76Se", "[76Se]");
			put("77Se", "[77Se]");
			put("78Se", "[78Se]");
			put("79Se", "[79Se]");
			put("80Se", "[80Se]");
			put("81Se", "[81Se]");
			put("82Se", "[82Se]");
			put("83Se", "[83Se]");
			put("84Se", "[84Se]");
			put("85Se", "[85Se]");
			put("86Se", "[86Se]");
			put("87Se", "[87Se]");
			put("88Se", "[88Se]");
			put("89Se", "[89Se]");
			put("90Se", "[90Se]");
			put("91Se", "[91Se]");
			put("92Se", "[92Se]");
			put("93Se", "[93Se]");
			put("94Se", "[94Se]");
			put("67Br", "[67Br]");
			put("68Br", "[68Br]");
			put("69Br", "[69Br]");
			put("70Br", "[70Br]");
			put("71Br", "[71Br]");
			put("72Br", "[72Br]");
			put("73Br", "[73Br]");
			put("74Br", "[74Br]");
			put("75Br", "[75Br]");
			put("76Br", "[76Br]");
			put("77Br", "[77Br]");
			put("78Br", "[78Br]");
			put("79Br", "[79Br]");
			put("80Br", "[80Br]");
			put("81Br", "[81Br]");
			put("82Br", "[82Br]");
			put("83Br", "[83Br]");
			put("84Br", "[84Br]");
			put("85Br", "[85Br]");
			put("86Br", "[86Br]");
			put("87Br", "[87Br]");
			put("88Br", "[88Br]");
			put("89Br", "[89Br]");
			put("90Br", "[90Br]");
			put("91Br", "[91Br]");
			put("92Br", "[92Br]");
			put("93Br", "[93Br]");
			put("94Br", "[94Br]");
			put("95Br", "[95Br]");
			put("96Br", "[96Br]");
			put("97Br", "[97Br]");
			put("69Kr", "[69Kr]");
			put("70Kr", "[70Kr]");
			put("71Kr", "[71Kr]");
			put("72Kr", "[72Kr]");
			put("73Kr", "[73Kr]");
			put("74Kr", "[74Kr]");
			put("75Kr", "[75Kr]");
			put("76Kr", "[76Kr]");
			put("77Kr", "[77Kr]");
			put("78Kr", "[78Kr]");
			put("79Kr", "[79Kr]");
			put("80Kr", "[80Kr]");
			put("81Kr", "[81Kr]");
			put("82Kr", "[82Kr]");
			put("83Kr", "[83Kr]");
			put("84Kr", "[84Kr]");
			put("85Kr", "[85Kr]");
			put("86Kr", "[86Kr]");
			put("87Kr", "[87Kr]");
			put("88Kr", "[88Kr]");
			put("89Kr", "[89Kr]");
			put("90Kr", "[90Kr]");
			put("91Kr", "[91Kr]");
			put("92Kr", "[92Kr]");
			put("93Kr", "[93Kr]");
			put("94Kr", "[94Kr]");
			put("95Kr", "[95Kr]");
			put("96Kr", "[96Kr]");
			put("97Kr", "[97Kr]");
			put("98Kr", "[98Kr]");
			put("99Kr", "[99Kr]");
			put("100Kr", "[100Kr]");
			put("71Rb", "[71Rb]");
			put("72Rb", "[72Rb]");
			put("73Rb", "[73Rb]");
			put("74Rb", "[74Rb]");
			put("75Rb", "[75Rb]");
			put("76Rb", "[76Rb]");
			put("77Rb", "[77Rb]");
			put("78Rb", "[78Rb]");
			put("79Rb", "[79Rb]");
			put("80Rb", "[80Rb]");
			put("81Rb", "[81Rb]");
			put("82Rb", "[82Rb]");
			put("83Rb", "[83Rb]");
			put("84Rb", "[84Rb]");
			put("85Rb", "[85Rb]");
			put("86Rb", "[86Rb]");
			put("87Rb", "[87Rb]");
			put("88Rb", "[88Rb]");
			put("89Rb", "[89Rb]");
			put("90Rb", "[90Rb]");
			put("91Rb", "[91Rb]");
			put("92Rb", "[92Rb]");
			put("93Rb", "[93Rb]");
			put("94Rb", "[94Rb]");
			put("95Rb", "[95Rb]");
			put("96Rb", "[96Rb]");
			put("97Rb", "[97Rb]");
			put("98Rb", "[98Rb]");
			put("99Rb", "[99Rb]");
			put("100Rb", "[100Rb]");
			put("101Rb", "[101Rb]");
			put("102Rb", "[102Rb]");
			put("73Sr", "[73Sr]");
			put("74Sr", "[74Sr]");
			put("75Sr", "[75Sr]");
			put("76Sr", "[76Sr]");
			put("77Sr", "[77Sr]");
			put("78Sr", "[78Sr]");
			put("79Sr", "[79Sr]");
			put("80Sr", "[80Sr]");
			put("81Sr", "[81Sr]");
			put("82Sr", "[82Sr]");
			put("83Sr", "[83Sr]");
			put("84Sr", "[84Sr]");
			put("85Sr", "[85Sr]");
			put("86Sr", "[86Sr]");
			put("87Sr", "[87Sr]");
			put("88Sr", "[88Sr]");
			put("89Sr", "[89Sr]");
			put("90Sr", "[90Sr]");
			put("91Sr", "[91Sr]");
			put("92Sr", "[92Sr]");
			put("93Sr", "[93Sr]");
			put("94Sr", "[94Sr]");
			put("95Sr", "[95Sr]");
			put("96Sr", "[96Sr]");
			put("97Sr", "[97Sr]");
			put("98Sr", "[98Sr]");
			put("99Sr", "[99Sr]");
			put("100Sr", "[100Sr]");
			put("101Sr", "[101Sr]");
			put("102Sr", "[102Sr]");
			put("103Sr", "[103Sr]");
			put("104Sr", "[104Sr]");
			put("105Sr", "[105Sr]");
			put("76Y", "[76Y]");
			put("77Y", "[77Y]");
			put("78Y", "[78Y]");
			put("79Y", "[79Y]");
			put("80Y", "[80Y]");
			put("81Y", "[81Y]");
			put("82Y", "[82Y]");
			put("83Y", "[83Y]");
			put("84Y", "[84Y]");
			put("85Y", "[85Y]");
			put("86Y", "[86Y]");
			put("87Y", "[87Y]");
			put("88Y", "[88Y]");
			put("89Y", "[89Y]");
			put("90Y", "[90Y]");
			put("91Y", "[91Y]");
			put("92Y", "[92Y]");
			put("93Y", "[93Y]");
			put("94Y", "[94Y]");
			put("95Y", "[95Y]");
			put("96Y", "[96Y]");
			put("97Y", "[97Y]");
			put("98Y", "[98Y]");
			put("99Y", "[99Y]");
			put("100Y", "[100Y]");
			put("101Y", "[101Y]");
			put("102Y", "[102Y]");
			put("103Y", "[103Y]");
			put("104Y", "[104Y]");
			put("105Y", "[105Y]");
			put("106Y", "[106Y]");
			put("107Y", "[107Y]");
			put("108Y", "[108Y]");
			put("78Zr", "[78Zr]");
			put("79Zr", "[79Zr]");
			put("80Zr", "[80Zr]");
			put("81Zr", "[81Zr]");
			put("82Zr", "[82Zr]");
			put("83Zr", "[83Zr]");
			put("84Zr", "[84Zr]");
			put("85Zr", "[85Zr]");
			put("86Zr", "[86Zr]");
			put("87Zr", "[87Zr]");
			put("88Zr", "[88Zr]");
			put("89Zr", "[89Zr]");
			put("90Zr", "[90Zr]");
			put("91Zr", "[91Zr]");
			put("92Zr", "[92Zr]");
			put("93Zr", "[93Zr]");
			put("94Zr", "[94Zr]");
			put("95Zr", "[95Zr]");
			put("96Zr", "[96Zr]");
			put("97Zr", "[97Zr]");
			put("98Zr", "[98Zr]");
			put("99Zr", "[99Zr]");
			put("100Zr", "[100Zr]");
			put("101Zr", "[101Zr]");
			put("102Zr", "[102Zr]");
			put("103Zr", "[103Zr]");
			put("104Zr", "[104Zr]");
			put("105Zr", "[105Zr]");
			put("106Zr", "[106Zr]");
			put("107Zr", "[107Zr]");
			put("108Zr", "[108Zr]");
			put("109Zr", "[109Zr]");
			put("110Zr", "[110Zr]");
			put("81Nb", "[81Nb]");
			put("82Nb", "[82Nb]");
			put("83Nb", "[83Nb]");
			put("84Nb", "[84Nb]");
			put("85Nb", "[85Nb]");
			put("86Nb", "[86Nb]");
			put("87Nb", "[87Nb]");
			put("88Nb", "[88Nb]");
			put("89Nb", "[89Nb]");
			put("90Nb", "[90Nb]");
			put("91Nb", "[91Nb]");
			put("92Nb", "[92Nb]");
			put("93Nb", "[93Nb]");
			put("94Nb", "[94Nb]");
			put("95Nb", "[95Nb]");
			put("96Nb", "[96Nb]");
			put("97Nb", "[97Nb]");
			put("98Nb", "[98Nb]");
			put("99Nb", "[99Nb]");
			put("100Nb", "[100Nb]");
			put("101Nb", "[101Nb]");
			put("102Nb", "[102Nb]");
			put("103Nb", "[103Nb]");
			put("104Nb", "[104Nb]");
			put("105Nb", "[105Nb]");
			put("106Nb", "[106Nb]");
			put("107Nb", "[107Nb]");
			put("108Nb", "[108Nb]");
			put("109Nb", "[109Nb]");
			put("110Nb", "[110Nb]");
			put("111Nb", "[111Nb]");
			put("112Nb", "[112Nb]");
			put("113Nb", "[113Nb]");
			put("83Mo", "[83Mo]");
			put("84Mo", "[84Mo]");
			put("85Mo", "[85Mo]");
			put("86Mo", "[86Mo]");
			put("87Mo", "[87Mo]");
			put("88Mo", "[88Mo]");
			put("89Mo", "[89Mo]");
			put("90Mo", "[90Mo]");
			put("91Mo", "[91Mo]");
			put("92Mo", "[92Mo]");
			put("93Mo", "[93Mo]");
			put("94Mo", "[94Mo]");
			put("95Mo", "[95Mo]");
			put("96Mo", "[96Mo]");
			put("97Mo", "[97Mo]");
			put("98Mo", "[98Mo]");
			put("99Mo", "[99Mo]");
			put("100Mo", "[100Mo]");
			put("101Mo", "[101Mo]");
			put("102Mo", "[102Mo]");
			put("103Mo", "[103Mo]");
			put("104Mo", "[104Mo]");
			put("105Mo", "[105Mo]");
			put("106Mo", "[106Mo]");
			put("107Mo", "[107Mo]");
			put("108Mo", "[108Mo]");
			put("109Mo", "[109Mo]");
			put("110Mo", "[110Mo]");
			put("111Mo", "[111Mo]");
			put("112Mo", "[112Mo]");
			put("113Mo", "[113Mo]");
			put("114Mo", "[114Mo]");
			put("115Mo", "[115Mo]");
			put("85Tc", "[85Tc]");
			put("86Tc", "[86Tc]");
			put("87Tc", "[87Tc]");
			put("88Tc", "[88Tc]");
			put("89Tc", "[89Tc]");
			put("90Tc", "[90Tc]");
			put("91Tc", "[91Tc]");
			put("92Tc", "[92Tc]");
			put("93Tc", "[93Tc]");
			put("94Tc", "[94Tc]");
			put("95Tc", "[95Tc]");
			put("96Tc", "[96Tc]");
			put("97Tc", "[97Tc]");
			put("98Tc", "[98Tc]");
			put("99Tc", "[99Tc]");
			put("100Tc", "[100Tc]");
			put("101Tc", "[101Tc]");
			put("102Tc", "[102Tc]");
			put("103Tc", "[103Tc]");
			put("104Tc", "[104Tc]");
			put("105Tc", "[105Tc]");
			put("106Tc", "[106Tc]");
			put("107Tc", "[107Tc]");
			put("108Tc", "[108Tc]");
			put("109Tc", "[109Tc]");
			put("110Tc", "[110Tc]");
			put("111Tc", "[111Tc]");
			put("112Tc", "[112Tc]");
			put("113Tc", "[113Tc]");
			put("114Tc", "[114Tc]");
			put("115Tc", "[115Tc]");
			put("116Tc", "[116Tc]");
			put("117Tc", "[117Tc]");
			put("118Tc", "[118Tc]");
			put("87Ru", "[87Ru]");
			put("88Ru", "[88Ru]");
			put("89Ru", "[89Ru]");
			put("90Ru", "[90Ru]");
			put("91Ru", "[91Ru]");
			put("92Ru", "[92Ru]");
			put("93Ru", "[93Ru]");
			put("94Ru", "[94Ru]");
			put("95Ru", "[95Ru]");
			put("96Ru", "[96Ru]");
			put("97Ru", "[97Ru]");
			put("98Ru", "[98Ru]");
			put("99Ru", "[99Ru]");
			put("100Ru", "[100Ru]");
			put("101Ru", "[101Ru]");
			put("102Ru", "[102Ru]");
			put("103Ru", "[103Ru]");
			put("104Ru", "[104Ru]");
			put("105Ru", "[105Ru]");
			put("106Ru", "[106Ru]");
			put("107Ru", "[107Ru]");
			put("108Ru", "[108Ru]");
			put("109Ru", "[109Ru]");
			put("110Ru", "[110Ru]");
			put("111Ru", "[111Ru]");
			put("112Ru", "[112Ru]");
			put("113Ru", "[113Ru]");
			put("114Ru", "[114Ru]");
			put("115Ru", "[115Ru]");
			put("116Ru", "[116Ru]");
			put("117Ru", "[117Ru]");
			put("118Ru", "[118Ru]");
			put("119Ru", "[119Ru]");
			put("120Ru", "[120Ru]");
			put("89Rh", "[89Rh]");
			put("90Rh", "[90Rh]");
			put("91Rh", "[91Rh]");
			put("92Rh", "[92Rh]");
			put("93Rh", "[93Rh]");
			put("94Rh", "[94Rh]");
			put("95Rh", "[95Rh]");
			put("96Rh", "[96Rh]");
			put("97Rh", "[97Rh]");
			put("98Rh", "[98Rh]");
			put("99Rh", "[99Rh]");
			put("100Rh", "[100Rh]");
			put("101Rh", "[101Rh]");
			put("102Rh", "[102Rh]");
			put("103Rh", "[103Rh]");
			put("104Rh", "[104Rh]");
			put("105Rh", "[105Rh]");
			put("106Rh", "[106Rh]");
			put("107Rh", "[107Rh]");
			put("108Rh", "[108Rh]");
			put("109Rh", "[109Rh]");
			put("110Rh", "[110Rh]");
			put("111Rh", "[111Rh]");
			put("112Rh", "[112Rh]");
			put("113Rh", "[113Rh]");
			put("114Rh", "[114Rh]");
			put("115Rh", "[115Rh]");
			put("116Rh", "[116Rh]");
			put("117Rh", "[117Rh]");
			put("118Rh", "[118Rh]");
			put("119Rh", "[119Rh]");
			put("120Rh", "[120Rh]");
			put("121Rh", "[121Rh]");
			put("122Rh", "[122Rh]");
			put("91Pd", "[91Pd]");
			put("92Pd", "[92Pd]");
			put("93Pd", "[93Pd]");
			put("94Pd", "[94Pd]");
			put("95Pd", "[95Pd]");
			put("96Pd", "[96Pd]");
			put("97Pd", "[97Pd]");
			put("98Pd", "[98Pd]");
			put("99Pd", "[99Pd]");
			put("100Pd", "[100Pd]");
			put("101Pd", "[101Pd]");
			put("102Pd", "[102Pd]");
			put("103Pd", "[103Pd]");
			put("104Pd", "[104Pd]");
			put("105Pd", "[105Pd]");
			put("106Pd", "[106Pd]");
			put("107Pd", "[107Pd]");
			put("108Pd", "[108Pd]");
			put("109Pd", "[109Pd]");
			put("110Pd", "[110Pd]");
			put("111Pd", "[111Pd]");
			put("112Pd", "[112Pd]");
			put("113Pd", "[113Pd]");
			put("114Pd", "[114Pd]");
			put("115Pd", "[115Pd]");
			put("116Pd", "[116Pd]");
			put("117Pd", "[117Pd]");
			put("118Pd", "[118Pd]");
			put("119Pd", "[119Pd]");
			put("120Pd", "[120Pd]");
			put("121Pd", "[121Pd]");
			put("122Pd", "[122Pd]");
			put("123Pd", "[123Pd]");
			put("124Pd", "[124Pd]");
			put("93Ag", "[93Ag]");
			put("94Ag", "[94Ag]");
			put("95Ag", "[95Ag]");
			put("96Ag", "[96Ag]");
			put("97Ag", "[97Ag]");
			put("98Ag", "[98Ag]");
			put("99Ag", "[99Ag]");
			put("100Ag", "[100Ag]");
			put("101Ag", "[101Ag]");
			put("102Ag", "[102Ag]");
			put("103Ag", "[103Ag]");
			put("104Ag", "[104Ag]");
			put("105Ag", "[105Ag]");
			put("106Ag", "[106Ag]");
			put("107Ag", "[107Ag]");
			put("108Ag", "[108Ag]");
			put("109Ag", "[109Ag]");
			put("110Ag", "[110Ag]");
			put("111Ag", "[111Ag]");
			put("112Ag", "[112Ag]");
			put("113Ag", "[113Ag]");
			put("114Ag", "[114Ag]");
			put("115Ag", "[115Ag]");
			put("116Ag", "[116Ag]");
			put("117Ag", "[117Ag]");
			put("118Ag", "[118Ag]");
			put("119Ag", "[119Ag]");
			put("120Ag", "[120Ag]");
			put("121Ag", "[121Ag]");
			put("122Ag", "[122Ag]");
			put("123Ag", "[123Ag]");
			put("124Ag", "[124Ag]");
			put("125Ag", "[125Ag]");
			put("126Ag", "[126Ag]");
			put("127Ag", "[127Ag]");
			put("128Ag", "[128Ag]");
			put("129Ag", "[129Ag]");
			put("130Ag", "[130Ag]");
			put("95Cd", "[95Cd]");
			put("96Cd", "[96Cd]");
			put("97Cd", "[97Cd]");
			put("98Cd", "[98Cd]");
			put("99Cd", "[99Cd]");
			put("100Cd", "[100Cd]");
			put("101Cd", "[101Cd]");
			put("102Cd", "[102Cd]");
			put("103Cd", "[103Cd]");
			put("104Cd", "[104Cd]");
			put("105Cd", "[105Cd]");
			put("106Cd", "[106Cd]");
			put("107Cd", "[107Cd]");
			put("108Cd", "[108Cd]");
			put("109Cd", "[109Cd]");
			put("110Cd", "[110Cd]");
			put("111Cd", "[111Cd]");
			put("112Cd", "[112Cd]");
			put("113Cd", "[113Cd]");
			put("114Cd", "[114Cd]");
			put("115Cd", "[115Cd]");
			put("116Cd", "[116Cd]");
			put("117Cd", "[117Cd]");
			put("118Cd", "[118Cd]");
			put("119Cd", "[119Cd]");
			put("120Cd", "[120Cd]");
			put("121Cd", "[121Cd]");
			put("122Cd", "[122Cd]");
			put("123Cd", "[123Cd]");
			put("124Cd", "[124Cd]");
			put("125Cd", "[125Cd]");
			put("126Cd", "[126Cd]");
			put("127Cd", "[127Cd]");
			put("128Cd", "[128Cd]");
			put("129Cd", "[129Cd]");
			put("130Cd", "[130Cd]");
			put("131Cd", "[131Cd]");
			put("132Cd", "[132Cd]");
			put("97In", "[97In]");
			put("98In", "[98In]");
			put("99In", "[99In]");
			put("100In", "[100In]");
			put("101In", "[101In]");
			put("102In", "[102In]");
			put("103In", "[103In]");
			put("104In", "[104In]");
			put("105In", "[105In]");
			put("106In", "[106In]");
			put("107In", "[107In]");
			put("108In", "[108In]");
			put("109In", "[109In]");
			put("110In", "[110In]");
			put("111In", "[111In]");
			put("112In", "[112In]");
			put("113In", "[113In]");
			put("114In", "[114In]");
			put("115In", "[115In]");
			put("116In", "[116In]");
			put("117In", "[117In]");
			put("118In", "[118In]");
			put("119In", "[119In]");
			put("120In", "[120In]");
			put("121In", "[121In]");
			put("122In", "[122In]");
			put("123In", "[123In]");
			put("124In", "[124In]");
			put("125In", "[125In]");
			put("126In", "[126In]");
			put("127In", "[127In]");
			put("128In", "[128In]");
			put("129In", "[129In]");
			put("130In", "[130In]");
			put("131In", "[131In]");
			put("132In", "[132In]");
			put("133In", "[133In]");
			put("134In", "[134In]");
			put("135In", "[135In]");
			put("99Sn", "[99Sn]");
			put("100Sn", "[100Sn]");
			put("101Sn", "[101Sn]");
			put("102Sn", "[102Sn]");
			put("103Sn", "[103Sn]");
			put("104Sn", "[104Sn]");
			put("105Sn", "[105Sn]");
			put("106Sn", "[106Sn]");
			put("107Sn", "[107Sn]");
			put("108Sn", "[108Sn]");
			put("109Sn", "[109Sn]");
			put("110Sn", "[110Sn]");
			put("111Sn", "[111Sn]");
			put("112Sn", "[112Sn]");
			put("113Sn", "[113Sn]");
			put("114Sn", "[114Sn]");
			put("115Sn", "[115Sn]");
			put("116Sn", "[116Sn]");
			put("117Sn", "[117Sn]");
			put("118Sn", "[118Sn]");
			put("119Sn", "[119Sn]");
			put("120Sn", "[120Sn]");
			put("121Sn", "[121Sn]");
			put("122Sn", "[122Sn]");
			put("123Sn", "[123Sn]");
			put("124Sn", "[124Sn]");
			put("125Sn", "[125Sn]");
			put("126Sn", "[126Sn]");
			put("127Sn", "[127Sn]");
			put("128Sn", "[128Sn]");
			put("129Sn", "[129Sn]");
			put("130Sn", "[130Sn]");
			put("131Sn", "[131Sn]");
			put("132Sn", "[132Sn]");
			put("133Sn", "[133Sn]");
			put("134Sn", "[134Sn]");
			put("135Sn", "[135Sn]");
			put("136Sn", "[136Sn]");
			put("137Sn", "[137Sn]");
			put("103Sb", "[103Sb]");
			put("104Sb", "[104Sb]");
			put("105Sb", "[105Sb]");
			put("106Sb", "[106Sb]");
			put("107Sb", "[107Sb]");
			put("108Sb", "[108Sb]");
			put("109Sb", "[109Sb]");
			put("110Sb", "[110Sb]");
			put("111Sb", "[111Sb]");
			put("112Sb", "[112Sb]");
			put("113Sb", "[113Sb]");
			put("114Sb", "[114Sb]");
			put("115Sb", "[115Sb]");
			put("116Sb", "[116Sb]");
			put("117Sb", "[117Sb]");
			put("118Sb", "[118Sb]");
			put("119Sb", "[119Sb]");
			put("120Sb", "[120Sb]");
			put("121Sb", "[121Sb]");
			put("122Sb", "[122Sb]");
			put("123Sb", "[123Sb]");
			put("124Sb", "[124Sb]");
			put("125Sb", "[125Sb]");
			put("126Sb", "[126Sb]");
			put("127Sb", "[127Sb]");
			put("128Sb", "[128Sb]");
			put("129Sb", "[129Sb]");
			put("130Sb", "[130Sb]");
			put("131Sb", "[131Sb]");
			put("132Sb", "[132Sb]");
			put("133Sb", "[133Sb]");
			put("134Sb", "[134Sb]");
			put("135Sb", "[135Sb]");
			put("136Sb", "[136Sb]");
			put("137Sb", "[137Sb]");
			put("138Sb", "[138Sb]");
			put("139Sb", "[139Sb]");
			put("105Te", "[105Te]");
			put("106Te", "[106Te]");
			put("107Te", "[107Te]");
			put("108Te", "[108Te]");
			put("109Te", "[109Te]");
			put("110Te", "[110Te]");
			put("111Te", "[111Te]");
			put("112Te", "[112Te]");
			put("113Te", "[113Te]");
			put("114Te", "[114Te]");
			put("115Te", "[115Te]");
			put("116Te", "[116Te]");
			put("117Te", "[117Te]");
			put("118Te", "[118Te]");
			put("119Te", "[119Te]");
			put("120Te", "[120Te]");
			put("121Te", "[121Te]");
			put("122Te", "[122Te]");
			put("123Te", "[123Te]");
			put("124Te", "[124Te]");
			put("125Te", "[125Te]");
			put("126Te", "[126Te]");
			put("127Te", "[127Te]");
			put("128Te", "[128Te]");
			put("129Te", "[129Te]");
			put("130Te", "[130Te]");
			put("131Te", "[131Te]");
			put("132Te", "[132Te]");
			put("133Te", "[133Te]");
			put("134Te", "[134Te]");
			put("135Te", "[135Te]");
			put("136Te", "[136Te]");
			put("137Te", "[137Te]");
			put("138Te", "[138Te]");
			put("139Te", "[139Te]");
			put("140Te", "[140Te]");
			put("141Te", "[141Te]");
			put("142Te", "[142Te]");
			put("108I", "[108I]");
			put("109I", "[109I]");
			put("110I", "[110I]");
			put("111I", "[111I]");
			put("112I", "[112I]");
			put("113I", "[113I]");
			put("114I", "[114I]");
			put("115I", "[115I]");
			put("116I", "[116I]");
			put("117I", "[117I]");
			put("118I", "[118I]");
			put("119I", "[119I]");
			put("120I", "[120I]");
			put("121I", "[121I]");
			put("122I", "[122I]");
			put("123I", "[123I]");
			put("124I", "[124I]");
			put("125I", "[125I]");
			put("126I", "[126I]");
			put("127I", "[127I]");
			put("128I", "[128I]");
			put("129I", "[129I]");
			put("130I", "[130I]");
			put("131I", "[131I]");
			put("132I", "[132I]");
			put("133I", "[133I]");
			put("134I", "[134I]");
			put("135I", "[135I]");
			put("136I", "[136I]");
			put("137I", "[137I]");
			put("138I", "[138I]");
			put("139I", "[139I]");
			put("140I", "[140I]");
			put("141I", "[141I]");
			put("142I", "[142I]");
			put("143I", "[143I]");
			put("144I", "[144I]");
			put("110Xe", "[110Xe]");
			put("111Xe", "[111Xe]");
			put("112Xe", "[112Xe]");
			put("113Xe", "[113Xe]");
			put("114Xe", "[114Xe]");
			put("115Xe", "[115Xe]");
			put("116Xe", "[116Xe]");
			put("117Xe", "[117Xe]");
			put("118Xe", "[118Xe]");
			put("119Xe", "[119Xe]");
			put("120Xe", "[120Xe]");
			put("121Xe", "[121Xe]");
			put("122Xe", "[122Xe]");
			put("123Xe", "[123Xe]");
			put("124Xe", "[124Xe]");
			put("125Xe", "[125Xe]");
			put("126Xe", "[126Xe]");
			put("127Xe", "[127Xe]");
			put("128Xe", "[128Xe]");
			put("129Xe", "[129Xe]");
			put("130Xe", "[130Xe]");
			put("131Xe", "[131Xe]");
			put("132Xe", "[132Xe]");
			put("133Xe", "[133Xe]");
			put("134Xe", "[134Xe]");
			put("135Xe", "[135Xe]");
			put("136Xe", "[136Xe]");
			put("137Xe", "[137Xe]");
			put("138Xe", "[138Xe]");
			put("139Xe", "[139Xe]");
			put("140Xe", "[140Xe]");
			put("141Xe", "[141Xe]");
			put("142Xe", "[142Xe]");
			put("143Xe", "[143Xe]");
			put("144Xe", "[144Xe]");
			put("145Xe", "[145Xe]");
			put("146Xe", "[146Xe]");
			put("147Xe", "[147Xe]");
			put("112Cs", "[112Cs]");
			put("113Cs", "[113Cs]");
			put("114Cs", "[114Cs]");
			put("115Cs", "[115Cs]");
			put("116Cs", "[116Cs]");
			put("117Cs", "[117Cs]");
			put("118Cs", "[118Cs]");
			put("119Cs", "[119Cs]");
			put("120Cs", "[120Cs]");
			put("121Cs", "[121Cs]");
			put("122Cs", "[122Cs]");
			put("123Cs", "[123Cs]");
			put("124Cs", "[124Cs]");
			put("125Cs", "[125Cs]");
			put("126Cs", "[126Cs]");
			put("127Cs", "[127Cs]");
			put("128Cs", "[128Cs]");
			put("129Cs", "[129Cs]");
			put("130Cs", "[130Cs]");
			put("131Cs", "[131Cs]");
			put("132Cs", "[132Cs]");
			put("133Cs", "[133Cs]");
			put("134Cs", "[134Cs]");
			put("135Cs", "[135Cs]");
			put("136Cs", "[136Cs]");
			put("137Cs", "[137Cs]");
			put("138Cs", "[138Cs]");
			put("139Cs", "[139Cs]");
			put("140Cs", "[140Cs]");
			put("141Cs", "[141Cs]");
			put("142Cs", "[142Cs]");
			put("143Cs", "[143Cs]");
			put("144Cs", "[144Cs]");
			put("145Cs", "[145Cs]");
			put("146Cs", "[146Cs]");
			put("147Cs", "[147Cs]");
			put("148Cs", "[148Cs]");
			put("149Cs", "[149Cs]");
			put("150Cs", "[150Cs]");
			put("151Cs", "[151Cs]");
			put("114Ba", "[114Ba]");
			put("115Ba", "[115Ba]");
			put("116Ba", "[116Ba]");
			put("117Ba", "[117Ba]");
			put("118Ba", "[118Ba]");
			put("119Ba", "[119Ba]");
			put("120Ba", "[120Ba]");
			put("121Ba", "[121Ba]");
			put("122Ba", "[122Ba]");
			put("123Ba", "[123Ba]");
			put("124Ba", "[124Ba]");
			put("125Ba", "[125Ba]");
			put("126Ba", "[126Ba]");
			put("127Ba", "[127Ba]");
			put("128Ba", "[128Ba]");
			put("129Ba", "[129Ba]");
			put("130Ba", "[130Ba]");
			put("131Ba", "[131Ba]");
			put("132Ba", "[132Ba]");
			put("133Ba", "[133Ba]");
			put("134Ba", "[134Ba]");
			put("135Ba", "[135Ba]");
			put("136Ba", "[136Ba]");
			put("137Ba", "[137Ba]");
			put("138Ba", "[138Ba]");
			put("139Ba", "[139Ba]");
			put("140Ba", "[140Ba]");
			put("141Ba", "[141Ba]");
			put("142Ba", "[142Ba]");
			put("143Ba", "[143Ba]");
			put("144Ba", "[144Ba]");
			put("145Ba", "[145Ba]");
			put("146Ba", "[146Ba]");
			put("147Ba", "[147Ba]");
			put("148Ba", "[148Ba]");
			put("149Ba", "[149Ba]");
			put("150Ba", "[150Ba]");
			put("151Ba", "[151Ba]");
			put("152Ba", "[152Ba]");
			put("153Ba", "[153Ba]");
			put("117La", "[117La]");
			put("118La", "[118La]");
			put("119La", "[119La]");
			put("120La", "[120La]");
			put("121La", "[121La]");
			put("122La", "[122La]");
			put("123La", "[123La]");
			put("124La", "[124La]");
			put("125La", "[125La]");
			put("126La", "[126La]");
			put("127La", "[127La]");
			put("128La", "[128La]");
			put("129La", "[129La]");
			put("130La", "[130La]");
			put("131La", "[131La]");
			put("132La", "[132La]");
			put("133La", "[133La]");
			put("134La", "[134La]");
			put("135La", "[135La]");
			put("136La", "[136La]");
			put("137La", "[137La]");
			put("138La", "[138La]");
			put("139La", "[139La]");
			put("140La", "[140La]");
			put("141La", "[141La]");
			put("142La", "[142La]");
			put("143La", "[143La]");
			put("144La", "[144La]");
			put("145La", "[145La]");
			put("146La", "[146La]");
			put("147La", "[147La]");
			put("148La", "[148La]");
			put("149La", "[149La]");
			put("150La", "[150La]");
			put("151La", "[151La]");
			put("152La", "[152La]");
			put("153La", "[153La]");
			put("154La", "[154La]");
			put("155La", "[155La]");
			put("119Ce", "[119Ce]");
			put("120Ce", "[120Ce]");
			put("121Ce", "[121Ce]");
			put("122Ce", "[122Ce]");
			put("123Ce", "[123Ce]");
			put("124Ce", "[124Ce]");
			put("125Ce", "[125Ce]");
			put("126Ce", "[126Ce]");
			put("127Ce", "[127Ce]");
			put("128Ce", "[128Ce]");
			put("129Ce", "[129Ce]");
			put("130Ce", "[130Ce]");
			put("131Ce", "[131Ce]");
			put("132Ce", "[132Ce]");
			put("133Ce", "[133Ce]");
			put("134Ce", "[134Ce]");
			put("135Ce", "[135Ce]");
			put("136Ce", "[136Ce]");
			put("137Ce", "[137Ce]");
			put("138Ce", "[138Ce]");
			put("139Ce", "[139Ce]");
			put("140Ce", "[140Ce]");
			put("141Ce", "[141Ce]");
			put("142Ce", "[142Ce]");
			put("143Ce", "[143Ce]");
			put("144Ce", "[144Ce]");
			put("145Ce", "[145Ce]");
			put("146Ce", "[146Ce]");
			put("147Ce", "[147Ce]");
			put("148Ce", "[148Ce]");
			put("149Ce", "[149Ce]");
			put("150Ce", "[150Ce]");
			put("151Ce", "[151Ce]");
			put("152Ce", "[152Ce]");
			put("153Ce", "[153Ce]");
			put("154Ce", "[154Ce]");
			put("155Ce", "[155Ce]");
			put("156Ce", "[156Ce]");
			put("157Ce", "[157Ce]");
			put("121Pr", "[121Pr]");
			put("122Pr", "[122Pr]");
			put("123Pr", "[123Pr]");
			put("124Pr", "[124Pr]");
			put("125Pr", "[125Pr]");
			put("126Pr", "[126Pr]");
			put("127Pr", "[127Pr]");
			put("128Pr", "[128Pr]");
			put("129Pr", "[129Pr]");
			put("130Pr", "[130Pr]");
			put("131Pr", "[131Pr]");
			put("132Pr", "[132Pr]");
			put("133Pr", "[133Pr]");
			put("134Pr", "[134Pr]");
			put("135Pr", "[135Pr]");
			put("136Pr", "[136Pr]");
			put("137Pr", "[137Pr]");
			put("138Pr", "[138Pr]");
			put("139Pr", "[139Pr]");
			put("140Pr", "[140Pr]");
			put("141Pr", "[141Pr]");
			put("142Pr", "[142Pr]");
			put("143Pr", "[143Pr]");
			put("144Pr", "[144Pr]");
			put("145Pr", "[145Pr]");
			put("146Pr", "[146Pr]");
			put("147Pr", "[147Pr]");
			put("148Pr", "[148Pr]");
			put("149Pr", "[149Pr]");
			put("150Pr", "[150Pr]");
			put("151Pr", "[151Pr]");
			put("152Pr", "[152Pr]");
			put("153Pr", "[153Pr]");
			put("154Pr", "[154Pr]");
			put("155Pr", "[155Pr]");
			put("156Pr", "[156Pr]");
			put("157Pr", "[157Pr]");
			put("158Pr", "[158Pr]");
			put("159Pr", "[159Pr]");
			put("124Nd", "[124Nd]");
			put("125Nd", "[125Nd]");
			put("126Nd", "[126Nd]");
			put("127Nd", "[127Nd]");
			put("128Nd", "[128Nd]");
			put("129Nd", "[129Nd]");
			put("130Nd", "[130Nd]");
			put("131Nd", "[131Nd]");
			put("132Nd", "[132Nd]");
			put("133Nd", "[133Nd]");
			put("134Nd", "[134Nd]");
			put("135Nd", "[135Nd]");
			put("136Nd", "[136Nd]");
			put("137Nd", "[137Nd]");
			put("138Nd", "[138Nd]");
			put("139Nd", "[139Nd]");
			put("140Nd", "[140Nd]");
			put("141Nd", "[141Nd]");
			put("142Nd", "[142Nd]");
			put("143Nd", "[143Nd]");
			put("144Nd", "[144Nd]");
			put("145Nd", "[145Nd]");
			put("146Nd", "[146Nd]");
			put("147Nd", "[147Nd]");
			put("148Nd", "[148Nd]");
			put("149Nd", "[149Nd]");
			put("150Nd", "[150Nd]");
			put("151Nd", "[151Nd]");
			put("152Nd", "[152Nd]");
			put("153Nd", "[153Nd]");
			put("154Nd", "[154Nd]");
			put("155Nd", "[155Nd]");
			put("156Nd", "[156Nd]");
			put("157Nd", "[157Nd]");
			put("158Nd", "[158Nd]");
			put("159Nd", "[159Nd]");
			put("160Nd", "[160Nd]");
			put("161Nd", "[161Nd]");
			put("126Pm", "[126Pm]");
			put("127Pm", "[127Pm]");
			put("128Pm", "[128Pm]");
			put("129Pm", "[129Pm]");
			put("130Pm", "[130Pm]");
			put("131Pm", "[131Pm]");
			put("132Pm", "[132Pm]");
			put("133Pm", "[133Pm]");
			put("134Pm", "[134Pm]");
			put("135Pm", "[135Pm]");
			put("136Pm", "[136Pm]");
			put("137Pm", "[137Pm]");
			put("138Pm", "[138Pm]");
			put("139Pm", "[139Pm]");
			put("140Pm", "[140Pm]");
			put("141Pm", "[141Pm]");
			put("142Pm", "[142Pm]");
			put("143Pm", "[143Pm]");
			put("144Pm", "[144Pm]");
			put("145Pm", "[145Pm]");
			put("146Pm", "[146Pm]");
			put("147Pm", "[147Pm]");
			put("148Pm", "[148Pm]");
			put("149Pm", "[149Pm]");
			put("150Pm", "[150Pm]");
			put("151Pm", "[151Pm]");
			put("152Pm", "[152Pm]");
			put("153Pm", "[153Pm]");
			put("154Pm", "[154Pm]");
			put("155Pm", "[155Pm]");
			put("156Pm", "[156Pm]");
			put("157Pm", "[157Pm]");
			put("158Pm", "[158Pm]");
			put("159Pm", "[159Pm]");
			put("160Pm", "[160Pm]");
			put("161Pm", "[161Pm]");
			put("162Pm", "[162Pm]");
			put("163Pm", "[163Pm]");
			put("128Sm", "[128Sm]");
			put("129Sm", "[129Sm]");
			put("130Sm", "[130Sm]");
			put("131Sm", "[131Sm]");
			put("132Sm", "[132Sm]");
			put("133Sm", "[133Sm]");
			put("134Sm", "[134Sm]");
			put("135Sm", "[135Sm]");
			put("136Sm", "[136Sm]");
			put("137Sm", "[137Sm]");
			put("138Sm", "[138Sm]");
			put("139Sm", "[139Sm]");
			put("140Sm", "[140Sm]");
			put("141Sm", "[141Sm]");
			put("142Sm", "[142Sm]");
			put("143Sm", "[143Sm]");
			put("144Sm", "[144Sm]");
			put("145Sm", "[145Sm]");
			put("146Sm", "[146Sm]");
			put("147Sm", "[147Sm]");
			put("148Sm", "[148Sm]");
			put("149Sm", "[149Sm]");
			put("150Sm", "[150Sm]");
			put("151Sm", "[151Sm]");
			put("152Sm", "[152Sm]");
			put("153Sm", "[153Sm]");
			put("154Sm", "[154Sm]");
			put("155Sm", "[155Sm]");
			put("156Sm", "[156Sm]");
			put("157Sm", "[157Sm]");
			put("158Sm", "[158Sm]");
			put("159Sm", "[159Sm]");
			put("160Sm", "[160Sm]");
			put("161Sm", "[161Sm]");
			put("162Sm", "[162Sm]");
			put("163Sm", "[163Sm]");
			put("164Sm", "[164Sm]");
			put("165Sm", "[165Sm]");
			put("130Eu", "[130Eu]");
			put("131Eu", "[131Eu]");
			put("132Eu", "[132Eu]");
			put("133Eu", "[133Eu]");
			put("134Eu", "[134Eu]");
			put("135Eu", "[135Eu]");
			put("136Eu", "[136Eu]");
			put("137Eu", "[137Eu]");
			put("138Eu", "[138Eu]");
			put("139Eu", "[139Eu]");
			put("140Eu", "[140Eu]");
			put("141Eu", "[141Eu]");
			put("142Eu", "[142Eu]");
			put("143Eu", "[143Eu]");
			put("144Eu", "[144Eu]");
			put("145Eu", "[145Eu]");
			put("146Eu", "[146Eu]");
			put("147Eu", "[147Eu]");
			put("148Eu", "[148Eu]");
			put("149Eu", "[149Eu]");
			put("150Eu", "[150Eu]");
			put("151Eu", "[151Eu]");
			put("152Eu", "[152Eu]");
			put("153Eu", "[153Eu]");
			put("154Eu", "[154Eu]");
			put("155Eu", "[155Eu]");
			put("156Eu", "[156Eu]");
			put("157Eu", "[157Eu]");
			put("158Eu", "[158Eu]");
			put("159Eu", "[159Eu]");
			put("160Eu", "[160Eu]");
			put("161Eu", "[161Eu]");
			put("162Eu", "[162Eu]");
			put("163Eu", "[163Eu]");
			put("164Eu", "[164Eu]");
			put("165Eu", "[165Eu]");
			put("166Eu", "[166Eu]");
			put("167Eu", "[167Eu]");
			put("134Gd", "[134Gd]");
			put("135Gd", "[135Gd]");
			put("136Gd", "[136Gd]");
			put("137Gd", "[137Gd]");
			put("138Gd", "[138Gd]");
			put("139Gd", "[139Gd]");
			put("140Gd", "[140Gd]");
			put("141Gd", "[141Gd]");
			put("142Gd", "[142Gd]");
			put("143Gd", "[143Gd]");
			put("144Gd", "[144Gd]");
			put("145Gd", "[145Gd]");
			put("146Gd", "[146Gd]");
			put("147Gd", "[147Gd]");
			put("148Gd", "[148Gd]");
			put("149Gd", "[149Gd]");
			put("150Gd", "[150Gd]");
			put("151Gd", "[151Gd]");
			put("152Gd", "[152Gd]");
			put("153Gd", "[153Gd]");
			put("154Gd", "[154Gd]");
			put("155Gd", "[155Gd]");
			put("156Gd", "[156Gd]");
			put("157Gd", "[157Gd]");
			put("158Gd", "[158Gd]");
			put("159Gd", "[159Gd]");
			put("160Gd", "[160Gd]");
			put("161Gd", "[161Gd]");
			put("162Gd", "[162Gd]");
			put("163Gd", "[163Gd]");
			put("164Gd", "[164Gd]");
			put("165Gd", "[165Gd]");
			put("166Gd", "[166Gd]");
			put("167Gd", "[167Gd]");
			put("168Gd", "[168Gd]");
			put("169Gd", "[169Gd]");
			put("136Tb", "[136Tb]");
			put("137Tb", "[137Tb]");
			put("138Tb", "[138Tb]");
			put("139Tb", "[139Tb]");
			put("140Tb", "[140Tb]");
			put("141Tb", "[141Tb]");
			put("142Tb", "[142Tb]");
			put("143Tb", "[143Tb]");
			put("144Tb", "[144Tb]");
			put("145Tb", "[145Tb]");
			put("146Tb", "[146Tb]");
			put("147Tb", "[147Tb]");
			put("148Tb", "[148Tb]");
			put("149Tb", "[149Tb]");
			put("150Tb", "[150Tb]");
			put("151Tb", "[151Tb]");
			put("152Tb", "[152Tb]");
			put("153Tb", "[153Tb]");
			put("154Tb", "[154Tb]");
			put("155Tb", "[155Tb]");
			put("156Tb", "[156Tb]");
			put("157Tb", "[157Tb]");
			put("158Tb", "[158Tb]");
			put("159Tb", "[159Tb]");
			put("160Tb", "[160Tb]");
			put("161Tb", "[161Tb]");
			put("162Tb", "[162Tb]");
			put("163Tb", "[163Tb]");
			put("164Tb", "[164Tb]");
			put("165Tb", "[165Tb]");
			put("166Tb", "[166Tb]");
			put("167Tb", "[167Tb]");
			put("168Tb", "[168Tb]");
			put("169Tb", "[169Tb]");
			put("170Tb", "[170Tb]");
			put("171Tb", "[171Tb]");
			put("138Dy", "[138Dy]");
			put("139Dy", "[139Dy]");
			put("140Dy", "[140Dy]");
			put("141Dy", "[141Dy]");
			put("142Dy", "[142Dy]");
			put("143Dy", "[143Dy]");
			put("144Dy", "[144Dy]");
			put("145Dy", "[145Dy]");
			put("146Dy", "[146Dy]");
			put("147Dy", "[147Dy]");
			put("148Dy", "[148Dy]");
			put("149Dy", "[149Dy]");
			put("150Dy", "[150Dy]");
			put("151Dy", "[151Dy]");
			put("152Dy", "[152Dy]");
			put("153Dy", "[153Dy]");
			put("154Dy", "[154Dy]");
			put("155Dy", "[155Dy]");
			put("156Dy", "[156Dy]");
			put("157Dy", "[157Dy]");
			put("158Dy", "[158Dy]");
			put("159Dy", "[159Dy]");
			put("160Dy", "[160Dy]");
			put("161Dy", "[161Dy]");
			put("162Dy", "[162Dy]");
			put("163Dy", "[163Dy]");
			put("164Dy", "[164Dy]");
			put("165Dy", "[165Dy]");
			put("166Dy", "[166Dy]");
			put("167Dy", "[167Dy]");
			put("168Dy", "[168Dy]");
			put("169Dy", "[169Dy]");
			put("170Dy", "[170Dy]");
			put("171Dy", "[171Dy]");
			put("172Dy", "[172Dy]");
			put("173Dy", "[173Dy]");
			put("140Ho", "[140Ho]");
			put("141Ho", "[141Ho]");
			put("142Ho", "[142Ho]");
			put("143Ho", "[143Ho]");
			put("144Ho", "[144Ho]");
			put("145Ho", "[145Ho]");
			put("146Ho", "[146Ho]");
			put("147Ho", "[147Ho]");
			put("148Ho", "[148Ho]");
			put("149Ho", "[149Ho]");
			put("150Ho", "[150Ho]");
			put("151Ho", "[151Ho]");
			put("152Ho", "[152Ho]");
			put("153Ho", "[153Ho]");
			put("154Ho", "[154Ho]");
			put("155Ho", "[155Ho]");
			put("156Ho", "[156Ho]");
			put("157Ho", "[157Ho]");
			put("158Ho", "[158Ho]");
			put("159Ho", "[159Ho]");
			put("160Ho", "[160Ho]");
			put("161Ho", "[161Ho]");
			put("162Ho", "[162Ho]");
			put("163Ho", "[163Ho]");
			put("164Ho", "[164Ho]");
			put("165Ho", "[165Ho]");
			put("166Ho", "[166Ho]");
			put("167Ho", "[167Ho]");
			put("168Ho", "[168Ho]");
			put("169Ho", "[169Ho]");
			put("170Ho", "[170Ho]");
			put("171Ho", "[171Ho]");
			put("172Ho", "[172Ho]");
			put("173Ho", "[173Ho]");
			put("174Ho", "[174Ho]");
			put("175Ho", "[175Ho]");
			put("143Er", "[143Er]");
			put("144Er", "[144Er]");
			put("145Er", "[145Er]");
			put("146Er", "[146Er]");
			put("147Er", "[147Er]");
			put("148Er", "[148Er]");
			put("149Er", "[149Er]");
			put("150Er", "[150Er]");
			put("151Er", "[151Er]");
			put("152Er", "[152Er]");
			put("153Er", "[153Er]");
			put("154Er", "[154Er]");
			put("155Er", "[155Er]");
			put("156Er", "[156Er]");
			put("157Er", "[157Er]");
			put("158Er", "[158Er]");
			put("159Er", "[159Er]");
			put("160Er", "[160Er]");
			put("161Er", "[161Er]");
			put("162Er", "[162Er]");
			put("163Er", "[163Er]");
			put("164Er", "[164Er]");
			put("165Er", "[165Er]");
			put("166Er", "[166Er]");
			put("167Er", "[167Er]");
			put("168Er", "[168Er]");
			put("169Er", "[169Er]");
			put("170Er", "[170Er]");
			put("171Er", "[171Er]");
			put("172Er", "[172Er]");
			put("173Er", "[173Er]");
			put("174Er", "[174Er]");
			put("175Er", "[175Er]");
			put("176Er", "[176Er]");
			put("177Er", "[177Er]");
			put("145Tm", "[145Tm]");
			put("146Tm", "[146Tm]");
			put("147Tm", "[147Tm]");
			put("148Tm", "[148Tm]");
			put("149Tm", "[149Tm]");
			put("150Tm", "[150Tm]");
			put("151Tm", "[151Tm]");
			put("152Tm", "[152Tm]");
			put("153Tm", "[153Tm]");
			put("154Tm", "[154Tm]");
			put("155Tm", "[155Tm]");
			put("156Tm", "[156Tm]");
			put("157Tm", "[157Tm]");
			put("158Tm", "[158Tm]");
			put("159Tm", "[159Tm]");
			put("160Tm", "[160Tm]");
			put("161Tm", "[161Tm]");
			put("162Tm", "[162Tm]");
			put("163Tm", "[163Tm]");
			put("164Tm", "[164Tm]");
			put("165Tm", "[165Tm]");
			put("166Tm", "[166Tm]");
			put("167Tm", "[167Tm]");
			put("168Tm", "[168Tm]");
			put("169Tm", "[169Tm]");
			put("170Tm", "[170Tm]");
			put("171Tm", "[171Tm]");
			put("172Tm", "[172Tm]");
			put("173Tm", "[173Tm]");
			put("174Tm", "[174Tm]");
			put("175Tm", "[175Tm]");
			put("176Tm", "[176Tm]");
			put("177Tm", "[177Tm]");
			put("178Tm", "[178Tm]");
			put("179Tm", "[179Tm]");
			put("148Yb", "[148Yb]");
			put("149Yb", "[149Yb]");
			put("150Yb", "[150Yb]");
			put("151Yb", "[151Yb]");
			put("152Yb", "[152Yb]");
			put("153Yb", "[153Yb]");
			put("154Yb", "[154Yb]");
			put("155Yb", "[155Yb]");
			put("156Yb", "[156Yb]");
			put("157Yb", "[157Yb]");
			put("158Yb", "[158Yb]");
			put("159Yb", "[159Yb]");
			put("160Yb", "[160Yb]");
			put("161Yb", "[161Yb]");
			put("162Yb", "[162Yb]");
			put("163Yb", "[163Yb]");
			put("164Yb", "[164Yb]");
			put("165Yb", "[165Yb]");
			put("166Yb", "[166Yb]");
			put("167Yb", "[167Yb]");
			put("168Yb", "[168Yb]");
			put("169Yb", "[169Yb]");
			put("170Yb", "[170Yb]");
			put("171Yb", "[171Yb]");
			put("172Yb", "[172Yb]");
			put("173Yb", "[173Yb]");
			put("174Yb", "[174Yb]");
			put("175Yb", "[175Yb]");
			put("176Yb", "[176Yb]");
			put("177Yb", "[177Yb]");
			put("178Yb", "[178Yb]");
			put("179Yb", "[179Yb]");
			put("180Yb", "[180Yb]");
			put("181Yb", "[181Yb]");
			put("182Yb", "[182Yb]");
			put("150Lu", "[150Lu]");
			put("151Lu", "[151Lu]");
			put("152Lu", "[152Lu]");
			put("153Lu", "[153Lu]");
			put("154Lu", "[154Lu]");
			put("155Lu", "[155Lu]");
			put("156Lu", "[156Lu]");
			put("157Lu", "[157Lu]");
			put("158Lu", "[158Lu]");
			put("159Lu", "[159Lu]");
			put("160Lu", "[160Lu]");
			put("161Lu", "[161Lu]");
			put("162Lu", "[162Lu]");
			put("163Lu", "[163Lu]");
			put("164Lu", "[164Lu]");
			put("165Lu", "[165Lu]");
			put("166Lu", "[166Lu]");
			put("167Lu", "[167Lu]");
			put("168Lu", "[168Lu]");
			put("169Lu", "[169Lu]");
			put("170Lu", "[170Lu]");
			put("171Lu", "[171Lu]");
			put("172Lu", "[172Lu]");
			put("173Lu", "[173Lu]");
			put("174Lu", "[174Lu]");
			put("175Lu", "[175Lu]");
			put("176Lu", "[176Lu]");
			put("177Lu", "[177Lu]");
			put("178Lu", "[178Lu]");
			put("179Lu", "[179Lu]");
			put("180Lu", "[180Lu]");
			put("181Lu", "[181Lu]");
			put("182Lu", "[182Lu]");
			put("183Lu", "[183Lu]");
			put("184Lu", "[184Lu]");
			put("153Hf", "[153Hf]");
			put("154Hf", "[154Hf]");
			put("155Hf", "[155Hf]");
			put("156Hf", "[156Hf]");
			put("157Hf", "[157Hf]");
			put("158Hf", "[158Hf]");
			put("159Hf", "[159Hf]");
			put("160Hf", "[160Hf]");
			put("161Hf", "[161Hf]");
			put("162Hf", "[162Hf]");
			put("163Hf", "[163Hf]");
			put("164Hf", "[164Hf]");
			put("165Hf", "[165Hf]");
			put("166Hf", "[166Hf]");
			put("167Hf", "[167Hf]");
			put("168Hf", "[168Hf]");
			put("169Hf", "[169Hf]");
			put("170Hf", "[170Hf]");
			put("171Hf", "[171Hf]");
			put("172Hf", "[172Hf]");
			put("173Hf", "[173Hf]");
			put("174Hf", "[174Hf]");
			put("175Hf", "[175Hf]");
			put("176Hf", "[176Hf]");
			put("177Hf", "[177Hf]");
			put("178Hf", "[178Hf]");
			put("179Hf", "[179Hf]");
			put("180Hf", "[180Hf]");
			put("181Hf", "[181Hf]");
			put("182Hf", "[182Hf]");
			put("183Hf", "[183Hf]");
			put("184Hf", "[184Hf]");
			put("185Hf", "[185Hf]");
			put("186Hf", "[186Hf]");
			put("187Hf", "[187Hf]");
			put("188Hf", "[188Hf]");
			put("155Ta", "[155Ta]");
			put("156Ta", "[156Ta]");
			put("157Ta", "[157Ta]");
			put("158Ta", "[158Ta]");
			put("159Ta", "[159Ta]");
			put("160Ta", "[160Ta]");
			put("161Ta", "[161Ta]");
			put("162Ta", "[162Ta]");
			put("163Ta", "[163Ta]");
			put("164Ta", "[164Ta]");
			put("165Ta", "[165Ta]");
			put("166Ta", "[166Ta]");
			put("167Ta", "[167Ta]");
			put("168Ta", "[168Ta]");
			put("169Ta", "[169Ta]");
			put("170Ta", "[170Ta]");
			put("171Ta", "[171Ta]");
			put("172Ta", "[172Ta]");
			put("173Ta", "[173Ta]");
			put("174Ta", "[174Ta]");
			put("175Ta", "[175Ta]");
			put("176Ta", "[176Ta]");
			put("177Ta", "[177Ta]");
			put("178Ta", "[178Ta]");
			put("179Ta", "[179Ta]");
			put("180Ta", "[180Ta]");
			put("181Ta", "[181Ta]");
			put("182Ta", "[182Ta]");
			put("183Ta", "[183Ta]");
			put("184Ta", "[184Ta]");
			put("185Ta", "[185Ta]");
			put("186Ta", "[186Ta]");
			put("187Ta", "[187Ta]");
			put("188Ta", "[188Ta]");
			put("189Ta", "[189Ta]");
			put("190Ta", "[190Ta]");
			put("158W", "[158W]");
			put("159W", "[159W]");
			put("160W", "[160W]");
			put("161W", "[161W]");
			put("162W", "[162W]");
			put("163W", "[163W]");
			put("164W", "[164W]");
			put("165W", "[165W]");
			put("166W", "[166W]");
			put("167W", "[167W]");
			put("168W", "[168W]");
			put("169W", "[169W]");
			put("170W", "[170W]");
			put("171W", "[171W]");
			put("172W", "[172W]");
			put("173W", "[173W]");
			put("174W", "[174W]");
			put("175W", "[175W]");
			put("176W", "[176W]");
			put("177W", "[177W]");
			put("178W", "[178W]");
			put("179W", "[179W]");
			put("180W", "[180W]");
			put("181W", "[181W]");
			put("182W", "[182W]");
			put("183W", "[183W]");
			put("184W", "[184W]");
			put("185W", "[185W]");
			put("186W", "[186W]");
			put("187W", "[187W]");
			put("188W", "[188W]");
			put("189W", "[189W]");
			put("190W", "[190W]");
			put("191W", "[191W]");
			put("192W", "[192W]");
			put("160Re", "[160Re]");
			put("161Re", "[161Re]");
			put("162Re", "[162Re]");
			put("163Re", "[163Re]");
			put("164Re", "[164Re]");
			put("165Re", "[165Re]");
			put("166Re", "[166Re]");
			put("167Re", "[167Re]");
			put("168Re", "[168Re]");
			put("169Re", "[169Re]");
			put("170Re", "[170Re]");
			put("171Re", "[171Re]");
			put("172Re", "[172Re]");
			put("173Re", "[173Re]");
			put("174Re", "[174Re]");
			put("175Re", "[175Re]");
			put("176Re", "[176Re]");
			put("177Re", "[177Re]");
			put("178Re", "[178Re]");
			put("179Re", "[179Re]");
			put("180Re", "[180Re]");
			put("181Re", "[181Re]");
			put("182Re", "[182Re]");
			put("183Re", "[183Re]");
			put("184Re", "[184Re]");
			put("185Re", "[185Re]");
			put("186Re", "[186Re]");
			put("187Re", "[187Re]");
			put("188Re", "[188Re]");
			put("189Re", "[189Re]");
			put("190Re", "[190Re]");
			put("191Re", "[191Re]");
			put("192Re", "[192Re]");
			put("193Re", "[193Re]");
			put("194Re", "[194Re]");
			put("162Os", "[162Os]");
			put("163Os", "[163Os]");
			put("164Os", "[164Os]");
			put("165Os", "[165Os]");
			put("166Os", "[166Os]");
			put("167Os", "[167Os]");
			put("168Os", "[168Os]");
			put("169Os", "[169Os]");
			put("170Os", "[170Os]");
			put("171Os", "[171Os]");
			put("172Os", "[172Os]");
			put("173Os", "[173Os]");
			put("174Os", "[174Os]");
			put("175Os", "[175Os]");
			put("176Os", "[176Os]");
			put("177Os", "[177Os]");
			put("178Os", "[178Os]");
			put("179Os", "[179Os]");
			put("180Os", "[180Os]");
			put("181Os", "[181Os]");
			put("182Os", "[182Os]");
			put("183Os", "[183Os]");
			put("184Os", "[184Os]");
			put("185Os", "[185Os]");
			put("186Os", "[186Os]");
			put("187Os", "[187Os]");
			put("188Os", "[188Os]");
			put("189Os", "[189Os]");
			put("190Os", "[190Os]");
			put("191Os", "[191Os]");
			put("192Os", "[192Os]");
			put("193Os", "[193Os]");
			put("194Os", "[194Os]");
			put("195Os", "[195Os]");
			put("196Os", "[196Os]");
			put("164Ir", "[164Ir]");
			put("165Ir", "[165Ir]");
			put("166Ir", "[166Ir]");
			put("167Ir", "[167Ir]");
			put("168Ir", "[168Ir]");
			put("169Ir", "[169Ir]");
			put("170Ir", "[170Ir]");
			put("171Ir", "[171Ir]");
			put("172Ir", "[172Ir]");
			put("173Ir", "[173Ir]");
			put("174Ir", "[174Ir]");
			put("175Ir", "[175Ir]");
			put("176Ir", "[176Ir]");
			put("177Ir", "[177Ir]");
			put("178Ir", "[178Ir]");
			put("179Ir", "[179Ir]");
			put("180Ir", "[180Ir]");
			put("181Ir", "[181Ir]");
			put("182Ir", "[182Ir]");
			put("183Ir", "[183Ir]");
			put("184Ir", "[184Ir]");
			put("185Ir", "[185Ir]");
			put("186Ir", "[186Ir]");
			put("187Ir", "[187Ir]");
			put("188Ir", "[188Ir]");
			put("189Ir", "[189Ir]");
			put("190Ir", "[190Ir]");
			put("191Ir", "[191Ir]");
			put("192Ir", "[192Ir]");
			put("193Ir", "[193Ir]");
			put("194Ir", "[194Ir]");
			put("195Ir", "[195Ir]");
			put("196Ir", "[196Ir]");
			put("197Ir", "[197Ir]");
			put("198Ir", "[198Ir]");
			put("199Ir", "[199Ir]");
			put("166Pt", "[166Pt]");
			put("167Pt", "[167Pt]");
			put("168Pt", "[168Pt]");
			put("169Pt", "[169Pt]");
			put("170Pt", "[170Pt]");
			put("171Pt", "[171Pt]");
			put("172Pt", "[172Pt]");
			put("173Pt", "[173Pt]");
			put("174Pt", "[174Pt]");
			put("175Pt", "[175Pt]");
			put("176Pt", "[176Pt]");
			put("177Pt", "[177Pt]");
			put("178Pt", "[178Pt]");
			put("179Pt", "[179Pt]");
			put("180Pt", "[180Pt]");
			put("181Pt", "[181Pt]");
			put("182Pt", "[182Pt]");
			put("183Pt", "[183Pt]");
			put("184Pt", "[184Pt]");
			put("185Pt", "[185Pt]");
			put("186Pt", "[186Pt]");
			put("187Pt", "[187Pt]");
			put("188Pt", "[188Pt]");
			put("189Pt", "[189Pt]");
			put("190Pt", "[190Pt]");
			put("191Pt", "[191Pt]");
			put("192Pt", "[192Pt]");
			put("193Pt", "[193Pt]");
			put("194Pt", "[194Pt]");
			put("195Pt", "[195Pt]");
			put("196Pt", "[196Pt]");
			put("197Pt", "[197Pt]");
			put("198Pt", "[198Pt]");
			put("199Pt", "[199Pt]");
			put("200Pt", "[200Pt]");
			put("201Pt", "[201Pt]");
			put("202Pt", "[202Pt]");
			put("169Au", "[169Au]");
			put("170Au", "[170Au]");
			put("171Au", "[171Au]");
			put("172Au", "[172Au]");
			put("173Au", "[173Au]");
			put("174Au", "[174Au]");
			put("175Au", "[175Au]");
			put("176Au", "[176Au]");
			put("177Au", "[177Au]");
			put("178Au", "[178Au]");
			put("179Au", "[179Au]");
			put("180Au", "[180Au]");
			put("181Au", "[181Au]");
			put("182Au", "[182Au]");
			put("183Au", "[183Au]");
			put("184Au", "[184Au]");
			put("185Au", "[185Au]");
			put("186Au", "[186Au]");
			put("187Au", "[187Au]");
			put("188Au", "[188Au]");
			put("189Au", "[189Au]");
			put("190Au", "[190Au]");
			put("191Au", "[191Au]");
			put("192Au", "[192Au]");
			put("193Au", "[193Au]");
			put("194Au", "[194Au]");
			put("195Au", "[195Au]");
			put("196Au", "[196Au]");
			put("197Au", "[197Au]");
			put("198Au", "[198Au]");
			put("199Au", "[199Au]");
			put("200Au", "[200Au]");
			put("201Au", "[201Au]");
			put("202Au", "[202Au]");
			put("203Au", "[203Au]");
			put("204Au", "[204Au]");
			put("205Au", "[205Au]");
			put("171Hg", "[171Hg]");
			put("172Hg", "[172Hg]");
			put("173Hg", "[173Hg]");
			put("174Hg", "[174Hg]");
			put("175Hg", "[175Hg]");
			put("176Hg", "[176Hg]");
			put("177Hg", "[177Hg]");
			put("178Hg", "[178Hg]");
			put("179Hg", "[179Hg]");
			put("180Hg", "[180Hg]");
			put("181Hg", "[181Hg]");
			put("182Hg", "[182Hg]");
			put("183Hg", "[183Hg]");
			put("184Hg", "[184Hg]");
			put("185Hg", "[185Hg]");
			put("186Hg", "[186Hg]");
			put("187Hg", "[187Hg]");
			put("188Hg", "[188Hg]");
			put("189Hg", "[189Hg]");
			put("190Hg", "[190Hg]");
			put("191Hg", "[191Hg]");
			put("192Hg", "[192Hg]");
			put("193Hg", "[193Hg]");
			put("194Hg", "[194Hg]");
			put("195Hg", "[195Hg]");
			put("196Hg", "[196Hg]");
			put("197Hg", "[197Hg]");
			put("198Hg", "[198Hg]");
			put("199Hg", "[199Hg]");
			put("200Hg", "[200Hg]");
			put("201Hg", "[201Hg]");
			put("202Hg", "[202Hg]");
			put("203Hg", "[203Hg]");
			put("204Hg", "[204Hg]");
			put("205Hg", "[205Hg]");
			put("206Hg", "[206Hg]");
			put("207Hg", "[207Hg]");
			put("208Hg", "[208Hg]");
			put("209Hg", "[209Hg]");
			put("210Hg", "[210Hg]");
			put("176Tl", "[176Tl]");
			put("177Tl", "[177Tl]");
			put("178Tl", "[178Tl]");
			put("179Tl", "[179Tl]");
			put("180Tl", "[180Tl]");
			put("181Tl", "[181Tl]");
			put("182Tl", "[182Tl]");
			put("183Tl", "[183Tl]");
			put("184Tl", "[184Tl]");
			put("185Tl", "[185Tl]");
			put("186Tl", "[186Tl]");
			put("187Tl", "[187Tl]");
			put("188Tl", "[188Tl]");
			put("189Tl", "[189Tl]");
			put("190Tl", "[190Tl]");
			put("191Tl", "[191Tl]");
			put("192Tl", "[192Tl]");
			put("193Tl", "[193Tl]");
			put("194Tl", "[194Tl]");
			put("195Tl", "[195Tl]");
			put("196Tl", "[196Tl]");
			put("197Tl", "[197Tl]");
			put("198Tl", "[198Tl]");
			put("199Tl", "[199Tl]");
			put("200Tl", "[200Tl]");
			put("201Tl", "[201Tl]");
			put("202Tl", "[202Tl]");
			put("203Tl", "[203Tl]");
			put("204Tl", "[204Tl]");
			put("205Tl", "[205Tl]");
			put("206Tl", "[206Tl]");
			put("207Tl", "[207Tl]");
			put("208Tl", "[208Tl]");
			put("209Tl", "[209Tl]");
			put("210Tl", "[210Tl]");
			put("211Tl", "[211Tl]");
			put("212Tl", "[212Tl]");
			put("178Pb", "[178Pb]");
			put("179Pb", "[179Pb]");
			put("180Pb", "[180Pb]");
			put("181Pb", "[181Pb]");
			put("182Pb", "[182Pb]");
			put("183Pb", "[183Pb]");
			put("184Pb", "[184Pb]");
			put("185Pb", "[185Pb]");
			put("186Pb", "[186Pb]");
			put("187Pb", "[187Pb]");
			put("188Pb", "[188Pb]");
			put("189Pb", "[189Pb]");
			put("190Pb", "[190Pb]");
			put("191Pb", "[191Pb]");
			put("192Pb", "[192Pb]");
			put("193Pb", "[193Pb]");
			put("194Pb", "[194Pb]");
			put("195Pb", "[195Pb]");
			put("196Pb", "[196Pb]");
			put("197Pb", "[197Pb]");
			put("198Pb", "[198Pb]");
			put("199Pb", "[199Pb]");
			put("200Pb", "[200Pb]");
			put("201Pb", "[201Pb]");
			put("202Pb", "[202Pb]");
			put("203Pb", "[203Pb]");
			put("204Pb", "[204Pb]");
			put("205Pb", "[205Pb]");
			put("206Pb", "[206Pb]");
			put("207Pb", "[207Pb]");
			put("208Pb", "[208Pb]");
			put("209Pb", "[209Pb]");
			put("210Pb", "[210Pb]");
			put("211Pb", "[211Pb]");
			put("212Pb", "[212Pb]");
			put("213Pb", "[213Pb]");
			put("214Pb", "[214Pb]");
			put("215Pb", "[215Pb]");
			put("184Bi", "[184Bi]");
			put("185Bi", "[185Bi]");
			put("186Bi", "[186Bi]");
			put("187Bi", "[187Bi]");
			put("188Bi", "[188Bi]");
			put("189Bi", "[189Bi]");
			put("190Bi", "[190Bi]");
			put("191Bi", "[191Bi]");
			put("192Bi", "[192Bi]");
			put("193Bi", "[193Bi]");
			put("194Bi", "[194Bi]");
			put("195Bi", "[195Bi]");
			put("196Bi", "[196Bi]");
			put("197Bi", "[197Bi]");
			put("198Bi", "[198Bi]");
			put("199Bi", "[199Bi]");
			put("200Bi", "[200Bi]");
			put("201Bi", "[201Bi]");
			put("202Bi", "[202Bi]");
			put("203Bi", "[203Bi]");
			put("204Bi", "[204Bi]");
			put("205Bi", "[205Bi]");
			put("206Bi", "[206Bi]");
			put("207Bi", "[207Bi]");
			put("208Bi", "[208Bi]");
			put("209Bi", "[209Bi]");
			put("210Bi", "[210Bi]");
			put("211Bi", "[211Bi]");
			put("212Bi", "[212Bi]");
			put("213Bi", "[213Bi]");
			put("214Bi", "[214Bi]");
			put("215Bi", "[215Bi]");
			put("216Bi", "[216Bi]");
			put("217Bi", "[217Bi]");
			put("218Bi", "[218Bi]");
			put("219Bi", "[219Bi]");
			put("188Po", "[188Po]");
			put("189Po", "[189Po]");
			put("190Po", "[190Po]");
			put("191Po", "[191Po]");
			put("192Po", "[192Po]");
			put("193Po", "[193Po]");
			put("194Po", "[194Po]");
			put("195Po", "[195Po]");
			put("196Po", "[196Po]");
			put("197Po", "[197Po]");
			put("198Po", "[198Po]");
			put("199Po", "[199Po]");
			put("200Po", "[200Po]");
			put("201Po", "[201Po]");
			put("202Po", "[202Po]");
			put("203Po", "[203Po]");
			put("204Po", "[204Po]");
			put("205Po", "[205Po]");
			put("206Po", "[206Po]");
			put("207Po", "[207Po]");
			put("208Po", "[208Po]");
			put("209Po", "[209Po]");
			put("210Po", "[210Po]");
			put("211Po", "[211Po]");
			put("212Po", "[212Po]");
			put("213Po", "[213Po]");
			put("214Po", "[214Po]");
			put("215Po", "[215Po]");
			put("216Po", "[216Po]");
			put("217Po", "[217Po]");
			put("218Po", "[218Po]");
			put("219Po", "[219Po]");
			put("220Po", "[220Po]");
			put("193At", "[193At]");
			put("194At", "[194At]");
			put("195At", "[195At]");
			put("196At", "[196At]");
			put("197At", "[197At]");
			put("198At", "[198At]");
			put("199At", "[199At]");
			put("200At", "[200At]");
			put("201At", "[201At]");
			put("202At", "[202At]");
			put("203At", "[203At]");
			put("204At", "[204At]");
			put("205At", "[205At]");
			put("206At", "[206At]");
			put("207At", "[207At]");
			put("208At", "[208At]");
			put("209At", "[209At]");
			put("210At", "[210At]");
			put("211At", "[211At]");
			put("212At", "[212At]");
			put("213At", "[213At]");
			put("214At", "[214At]");
			put("215At", "[215At]");
			put("216At", "[216At]");
			put("217At", "[217At]");
			put("218At", "[218At]");
			put("219At", "[219At]");
			put("220At", "[220At]");
			put("221At", "[221At]");
			put("222At", "[222At]");
			put("223At", "[223At]");
			put("195Rn", "[195Rn]");
			put("196Rn", "[196Rn]");
			put("197Rn", "[197Rn]");
			put("198Rn", "[198Rn]");
			put("199Rn", "[199Rn]");
			put("200Rn", "[200Rn]");
			put("201Rn", "[201Rn]");
			put("202Rn", "[202Rn]");
			put("203Rn", "[203Rn]");
			put("204Rn", "[204Rn]");
			put("205Rn", "[205Rn]");
			put("206Rn", "[206Rn]");
			put("207Rn", "[207Rn]");
			put("208Rn", "[208Rn]");
			put("209Rn", "[209Rn]");
			put("210Rn", "[210Rn]");
			put("211Rn", "[211Rn]");
			put("212Rn", "[212Rn]");
			put("213Rn", "[213Rn]");
			put("214Rn", "[214Rn]");
			put("215Rn", "[215Rn]");
			put("216Rn", "[216Rn]");
			put("217Rn", "[217Rn]");
			put("218Rn", "[218Rn]");
			put("219Rn", "[219Rn]");
			put("220Rn", "[220Rn]");
			put("221Rn", "[221Rn]");
			put("222Rn", "[222Rn]");
			put("223Rn", "[223Rn]");
			put("224Rn", "[224Rn]");
			put("225Rn", "[225Rn]");
			put("226Rn", "[226Rn]");
			put("227Rn", "[227Rn]");
			put("228Rn", "[228Rn]");
			put("199Fr", "[199Fr]");
			put("200Fr", "[200Fr]");
			put("201Fr", "[201Fr]");
			put("202Fr", "[202Fr]");
			put("203Fr", "[203Fr]");
			put("204Fr", "[204Fr]");
			put("205Fr", "[205Fr]");
			put("206Fr", "[206Fr]");
			put("207Fr", "[207Fr]");
			put("208Fr", "[208Fr]");
			put("209Fr", "[209Fr]");
			put("210Fr", "[210Fr]");
			put("211Fr", "[211Fr]");
			put("212Fr", "[212Fr]");
			put("213Fr", "[213Fr]");
			put("214Fr", "[214Fr]");
			put("215Fr", "[215Fr]");
			put("216Fr", "[216Fr]");
			put("217Fr", "[217Fr]");
			put("218Fr", "[218Fr]");
			put("219Fr", "[219Fr]");
			put("220Fr", "[220Fr]");
			put("221Fr", "[221Fr]");
			put("222Fr", "[222Fr]");
			put("223Fr", "[223Fr]");
			put("224Fr", "[224Fr]");
			put("225Fr", "[225Fr]");
			put("226Fr", "[226Fr]");
			put("227Fr", "[227Fr]");
			put("228Fr", "[228Fr]");
			put("229Fr", "[229Fr]");
			put("230Fr", "[230Fr]");
			put("231Fr", "[231Fr]");
			put("232Fr", "[232Fr]");
			put("202Ra", "[202Ra]");
			put("203Ra", "[203Ra]");
			put("204Ra", "[204Ra]");
			put("205Ra", "[205Ra]");
			put("206Ra", "[206Ra]");
			put("207Ra", "[207Ra]");
			put("208Ra", "[208Ra]");
			put("209Ra", "[209Ra]");
			put("210Ra", "[210Ra]");
			put("211Ra", "[211Ra]");
			put("212Ra", "[212Ra]");
			put("213Ra", "[213Ra]");
			put("214Ra", "[214Ra]");
			put("215Ra", "[215Ra]");
			put("216Ra", "[216Ra]");
			put("217Ra", "[217Ra]");
			put("218Ra", "[218Ra]");
			put("219Ra", "[219Ra]");
			put("220Ra", "[220Ra]");
			put("221Ra", "[221Ra]");
			put("222Ra", "[222Ra]");
			put("223Ra", "[223Ra]");
			put("224Ra", "[224Ra]");
			put("225Ra", "[225Ra]");
			put("226Ra", "[226Ra]");
			put("227Ra", "[227Ra]");
			put("228Ra", "[228Ra]");
			put("229Ra", "[229Ra]");
			put("230Ra", "[230Ra]");
			put("231Ra", "[231Ra]");
			put("232Ra", "[232Ra]");
			put("233Ra", "[233Ra]");
			put("234Ra", "[234Ra]");
			put("206Ac", "[206Ac]");
			put("207Ac", "[207Ac]");
			put("208Ac", "[208Ac]");
			put("209Ac", "[209Ac]");
			put("210Ac", "[210Ac]");
			put("211Ac", "[211Ac]");
			put("212Ac", "[212Ac]");
			put("213Ac", "[213Ac]");
			put("214Ac", "[214Ac]");
			put("215Ac", "[215Ac]");
			put("216Ac", "[216Ac]");
			put("217Ac", "[217Ac]");
			put("218Ac", "[218Ac]");
			put("219Ac", "[219Ac]");
			put("220Ac", "[220Ac]");
			put("221Ac", "[221Ac]");
			put("222Ac", "[222Ac]");
			put("223Ac", "[223Ac]");
			put("224Ac", "[224Ac]");
			put("225Ac", "[225Ac]");
			put("226Ac", "[226Ac]");
			put("227Ac", "[227Ac]");
			put("228Ac", "[228Ac]");
			put("229Ac", "[229Ac]");
			put("230Ac", "[230Ac]");
			put("231Ac", "[231Ac]");
			put("232Ac", "[232Ac]");
			put("233Ac", "[233Ac]");
			put("234Ac", "[234Ac]");
			put("235Ac", "[235Ac]");
			put("236Ac", "[236Ac]");
			put("209Th", "[209Th]");
			put("210Th", "[210Th]");
			put("211Th", "[211Th]");
			put("212Th", "[212Th]");
			put("213Th", "[213Th]");
			put("214Th", "[214Th]");
			put("215Th", "[215Th]");
			put("216Th", "[216Th]");
			put("217Th", "[217Th]");
			put("218Th", "[218Th]");
			put("219Th", "[219Th]");
			put("220Th", "[220Th]");
			put("221Th", "[221Th]");
			put("222Th", "[222Th]");
			put("223Th", "[223Th]");
			put("224Th", "[224Th]");
			put("225Th", "[225Th]");
			put("226Th", "[226Th]");
			put("227Th", "[227Th]");
			put("228Th", "[228Th]");
			put("229Th", "[229Th]");
			put("230Th", "[230Th]");
			put("231Th", "[231Th]");
			put("232Th", "[232Th]");
			put("233Th", "[233Th]");
			put("234Th", "[234Th]");
			put("235Th", "[235Th]");
			put("236Th", "[236Th]");
			put("237Th", "[237Th]");
			put("238Th", "[238Th]");
			put("212Pa", "[212Pa]");
			put("213Pa", "[213Pa]");
			put("214Pa", "[214Pa]");
			put("215Pa", "[215Pa]");
			put("216Pa", "[216Pa]");
			put("217Pa", "[217Pa]");
			put("218Pa", "[218Pa]");
			put("219Pa", "[219Pa]");
			put("220Pa", "[220Pa]");
			put("221Pa", "[221Pa]");
			put("222Pa", "[222Pa]");
			put("223Pa", "[223Pa]");
			put("224Pa", "[224Pa]");
			put("225Pa", "[225Pa]");
			put("226Pa", "[226Pa]");
			put("227Pa", "[227Pa]");
			put("228Pa", "[228Pa]");
			put("229Pa", "[229Pa]");
			put("230Pa", "[230Pa]");
			put("231Pa", "[231Pa]");
			put("232Pa", "[232Pa]");
			put("233Pa", "[233Pa]");
			put("234Pa", "[234Pa]");
			put("235Pa", "[235Pa]");
			put("236Pa", "[236Pa]");
			put("237Pa", "[237Pa]");
			put("238Pa", "[238Pa]");
			put("239Pa", "[239Pa]");
			put("240Pa", "[240Pa]");
			put("217U", "[217U]");
			put("218U", "[218U]");
			put("219U", "[219U]");
			put("220U", "[220U]");
			put("221U", "[221U]");
			put("222U", "[222U]");
			put("223U", "[223U]");
			put("224U", "[224U]");
			put("225U", "[225U]");
			put("226U", "[226U]");
			put("227U", "[227U]");
			put("228U", "[228U]");
			put("229U", "[229U]");
			put("230U", "[230U]");
			put("231U", "[231U]");
			put("232U", "[232U]");
			put("233U", "[233U]");
			put("234U", "[234U]");
			put("235U", "[235U]");
			put("236U", "[236U]");
			put("237U", "[237U]");
			put("238U", "[238U]");
			put("239U", "[239U]");
			put("240U", "[240U]");
			put("241U", "[241U]");
			put("242U", "[242U]");
			put("225Np", "[225Np]");
			put("226Np", "[226Np]");
			put("227Np", "[227Np]");
			put("228Np", "[228Np]");
			put("229Np", "[229Np]");
			put("230Np", "[230Np]");
			put("231Np", "[231Np]");
			put("232Np", "[232Np]");
			put("233Np", "[233Np]");
			put("234Np", "[234Np]");
			put("235Np", "[235Np]");
			put("236Np", "[236Np]");
			put("237Np", "[237Np]");
			put("238Np", "[238Np]");
			put("239Np", "[239Np]");
			put("240Np", "[240Np]");
			put("241Np", "[241Np]");
			put("242Np", "[242Np]");
			put("243Np", "[243Np]");
			put("244Np", "[244Np]");
			put("228Pu", "[228Pu]");
			put("229Pu", "[229Pu]");
			put("230Pu", "[230Pu]");
			put("231Pu", "[231Pu]");
			put("232Pu", "[232Pu]");
			put("233Pu", "[233Pu]");
			put("234Pu", "[234Pu]");
			put("235Pu", "[235Pu]");
			put("236Pu", "[236Pu]");
			put("237Pu", "[237Pu]");
			put("238Pu", "[238Pu]");
			put("239Pu", "[239Pu]");
			put("240Pu", "[240Pu]");
			put("241Pu", "[241Pu]");
			put("242Pu", "[242Pu]");
			put("243Pu", "[243Pu]");
			put("244Pu", "[244Pu]");
			put("245Pu", "[245Pu]");
			put("246Pu", "[246Pu]");
			put("247Pu", "[247Pu]");
			put("231Am", "[231Am]");
			put("232Am", "[232Am]");
			put("233Am", "[233Am]");
			put("234Am", "[234Am]");
			put("235Am", "[235Am]");
			put("236Am", "[236Am]");
			put("237Am", "[237Am]");
			put("238Am", "[238Am]");
			put("239Am", "[239Am]");
			put("240Am", "[240Am]");
			put("241Am", "[241Am]");
			put("242Am", "[242Am]");
			put("243Am", "[243Am]");
			put("244Am", "[244Am]");
			put("245Am", "[245Am]");
			put("246Am", "[246Am]");
			put("247Am", "[247Am]");
			put("248Am", "[248Am]");
			put("249Am", "[249Am]");
			put("233Cm", "[233Cm]");
			put("234Cm", "[234Cm]");
			put("235Cm", "[235Cm]");
			put("236Cm", "[236Cm]");
			put("237Cm", "[237Cm]");
			put("238Cm", "[238Cm]");
			put("239Cm", "[239Cm]");
			put("240Cm", "[240Cm]");
			put("241Cm", "[241Cm]");
			put("242Cm", "[242Cm]");
			put("243Cm", "[243Cm]");
			put("244Cm", "[244Cm]");
			put("245Cm", "[245Cm]");
			put("246Cm", "[246Cm]");
			put("247Cm", "[247Cm]");
			put("248Cm", "[248Cm]");
			put("249Cm", "[249Cm]");
			put("250Cm", "[250Cm]");
			put("251Cm", "[251Cm]");
			put("252Cm", "[252Cm]");
			put("235Bk", "[235Bk]");
			put("236Bk", "[236Bk]");
			put("237Bk", "[237Bk]");
			put("238Bk", "[238Bk]");
			put("239Bk", "[239Bk]");
			put("240Bk", "[240Bk]");
			put("241Bk", "[241Bk]");
			put("242Bk", "[242Bk]");
			put("243Bk", "[243Bk]");
			put("244Bk", "[244Bk]");
			put("245Bk", "[245Bk]");
			put("246Bk", "[246Bk]");
			put("247Bk", "[247Bk]");
			put("248Bk", "[248Bk]");
			put("249Bk", "[249Bk]");
			put("250Bk", "[250Bk]");
			put("251Bk", "[251Bk]");
			put("252Bk", "[252Bk]");
			put("253Bk", "[253Bk]");
			put("254Bk", "[254Bk]");
			put("237Cf", "[237Cf]");
			put("238Cf", "[238Cf]");
			put("239Cf", "[239Cf]");
			put("240Cf", "[240Cf]");
			put("241Cf", "[241Cf]");
			put("242Cf", "[242Cf]");
			put("243Cf", "[243Cf]");
			put("244Cf", "[244Cf]");
			put("245Cf", "[245Cf]");
			put("246Cf", "[246Cf]");
			put("247Cf", "[247Cf]");
			put("248Cf", "[248Cf]");
			put("249Cf", "[249Cf]");
			put("250Cf", "[250Cf]");
			put("251Cf", "[251Cf]");
			put("252Cf", "[252Cf]");
			put("253Cf", "[253Cf]");
			put("254Cf", "[254Cf]");
			put("255Cf", "[255Cf]");
			put("256Cf", "[256Cf]");
			put("240Es", "[240Es]");
			put("241Es", "[241Es]");
			put("242Es", "[242Es]");
			put("243Es", "[243Es]");
			put("244Es", "[244Es]");
			put("245Es", "[245Es]");
			put("246Es", "[246Es]");
			put("247Es", "[247Es]");
			put("248Es", "[248Es]");
			put("249Es", "[249Es]");
			put("250Es", "[250Es]");
			put("251Es", "[251Es]");
			put("252Es", "[252Es]");
			put("253Es", "[253Es]");
			put("254Es", "[254Es]");
			put("255Es", "[255Es]");
			put("256Es", "[256Es]");
			put("257Es", "[257Es]");
			put("258Es", "[258Es]");
			put("242Fm", "[242Fm]");
			put("243Fm", "[243Fm]");
			put("244Fm", "[244Fm]");
			put("245Fm", "[245Fm]");
			put("246Fm", "[246Fm]");
			put("247Fm", "[247Fm]");
			put("248Fm", "[248Fm]");
			put("249Fm", "[249Fm]");
			put("250Fm", "[250Fm]");
			put("251Fm", "[251Fm]");
			put("252Fm", "[252Fm]");
			put("253Fm", "[253Fm]");
			put("254Fm", "[254Fm]");
			put("255Fm", "[255Fm]");
			put("256Fm", "[256Fm]");
			put("257Fm", "[257Fm]");
			put("258Fm", "[258Fm]");
			put("259Fm", "[259Fm]");
			put("260Fm", "[260Fm]");
			put("245Md", "[245Md]");
			put("246Md", "[246Md]");
			put("247Md", "[247Md]");
			put("248Md", "[248Md]");
			put("249Md", "[249Md]");
			put("250Md", "[250Md]");
			put("251Md", "[251Md]");
			put("252Md", "[252Md]");
			put("253Md", "[253Md]");
			put("254Md", "[254Md]");
			put("255Md", "[255Md]");
			put("256Md", "[256Md]");
			put("257Md", "[257Md]");
			put("258Md", "[258Md]");
			put("259Md", "[259Md]");
			put("260Md", "[260Md]");
			put("261Md", "[261Md]");
			put("262Md", "[262Md]");
			put("248No", "[248No]");
			put("249No", "[249No]");
			put("250No", "[250No]");
			put("251No", "[251No]");
			put("252No", "[252No]");
			put("253No", "[253No]");
			put("254No", "[254No]");
			put("255No", "[255No]");
			put("256No", "[256No]");
			put("257No", "[257No]");
			put("258No", "[258No]");
			put("259No", "[259No]");
			put("260No", "[260No]");
			put("261No", "[261No]");
			put("262No", "[262No]");
			put("263No", "[263No]");
			put("264No", "[264No]");
			put("251Lr", "[251Lr]");
			put("252Lr", "[252Lr]");
			put("253Lr", "[253Lr]");
			put("254Lr", "[254Lr]");
			put("255Lr", "[255Lr]");
			put("256Lr", "[256Lr]");
			put("257Lr", "[257Lr]");
			put("258Lr", "[258Lr]");
			put("259Lr", "[259Lr]");
			put("260Lr", "[260Lr]");
			put("261Lr", "[261Lr]");
			put("262Lr", "[262Lr]");
			put("263Lr", "[263Lr]");
			put("264Lr", "[264Lr]");
			put("265Lr", "[265Lr]");
			put("266Lr", "[266Lr]");
			put("253Rf", "[253Rf]");
			put("254Rf", "[254Rf]");
			put("255Rf", "[255Rf]");
			put("256Rf", "[256Rf]");
			put("257Rf", "[257Rf]");
			put("258Rf", "[258Rf]");
			put("259Rf", "[259Rf]");
			put("260Rf", "[260Rf]");
			put("261Rf", "[261Rf]");
			put("262Rf", "[262Rf]");
			put("263Rf", "[263Rf]");
			put("264Rf", "[264Rf]");
			put("265Rf", "[265Rf]");
			put("266Rf", "[266Rf]");
			put("267Rf", "[267Rf]");
			put("268Rf", "[268Rf]");
			put("255Db", "[255Db]");
			put("256Db", "[256Db]");
			put("257Db", "[257Db]");
			put("258Db", "[258Db]");
			put("259Db", "[259Db]");
			put("260Db", "[260Db]");
			put("261Db", "[261Db]");
			put("262Db", "[262Db]");
			put("263Db", "[263Db]");
			put("264Db", "[264Db]");
			put("265Db", "[265Db]");
			put("266Db", "[266Db]");
			put("267Db", "[267Db]");
			put("268Db", "[268Db]");
			put("269Db", "[269Db]");
			put("270Db", "[270Db]");
			put("258Sg", "[258Sg]");
			put("259Sg", "[259Sg]");
			put("260Sg", "[260Sg]");
			put("261Sg", "[261Sg]");
			put("262Sg", "[262Sg]");
			put("263Sg", "[263Sg]");
			put("264Sg", "[264Sg]");
			put("265Sg", "[265Sg]");
			put("266Sg", "[266Sg]");
			put("267Sg", "[267Sg]");
			put("268Sg", "[268Sg]");
			put("269Sg", "[269Sg]");
			put("270Sg", "[270Sg]");
			put("271Sg", "[271Sg]");
			put("272Sg", "[272Sg]");
			put("273Sg", "[273Sg]");
			put("260Bh", "[260Bh]");
			put("261Bh", "[261Bh]");
			put("262Bh", "[262Bh]");
			put("263Bh", "[263Bh]");
			put("264Bh", "[264Bh]");
			put("265Bh", "[265Bh]");
			put("266Bh", "[266Bh]");
			put("267Bh", "[267Bh]");
			put("268Bh", "[268Bh]");
			put("269Bh", "[269Bh]");
			put("270Bh", "[270Bh]");
			put("271Bh", "[271Bh]");
			put("272Bh", "[272Bh]");
			put("273Bh", "[273Bh]");
			put("274Bh", "[274Bh]");
			put("275Bh", "[275Bh]");
			put("263Hs", "[263Hs]");
			put("264Hs", "[264Hs]");
			put("265Hs", "[265Hs]");
			put("266Hs", "[266Hs]");
			put("267Hs", "[267Hs]");
			put("268Hs", "[268Hs]");
			put("269Hs", "[269Hs]");
			put("270Hs", "[270Hs]");
			put("271Hs", "[271Hs]");
			put("272Hs", "[272Hs]");
			put("273Hs", "[273Hs]");
			put("274Hs", "[274Hs]");
			put("275Hs", "[275Hs]");
			put("276Hs", "[276Hs]");
			put("277Hs", "[277Hs]");
			put("265Mt", "[265Mt]");
			put("266Mt", "[266Mt]");
			put("267Mt", "[267Mt]");
			put("268Mt", "[268Mt]");
			put("269Mt", "[269Mt]");
			put("270Mt", "[270Mt]");
			put("271Mt", "[271Mt]");
			put("272Mt", "[272Mt]");
			put("273Mt", "[273Mt]");
			put("274Mt", "[274Mt]");
			put("275Mt", "[275Mt]");
			put("276Mt", "[276Mt]");
			put("277Mt", "[277Mt]");
			put("278Mt", "[278Mt]");
			put("279Mt", "[279Mt]");
			put("267Ds", "[267Ds]");
			put("268Ds", "[268Ds]");
			put("269Ds", "[269Ds]");
			put("270Ds", "[270Ds]");
			put("271Ds", "[271Ds]");
			put("272Ds", "[272Ds]");
			put("273Ds", "[273Ds]");
			put("274Ds", "[274Ds]");
			put("275Ds", "[275Ds]");
			put("276Ds", "[276Ds]");
			put("277Ds", "[277Ds]");
			put("278Ds", "[278Ds]");
			put("279Ds", "[279Ds]");
			put("280Ds", "[280Ds]");
			put("281Ds", "[281Ds]");
			put("272Rg", "[272Rg]");
			put("273Rg", "[273Rg]");
			put("274Rg", "[274Rg]");
			put("275Rg", "[275Rg]");
			put("276Rg", "[276Rg]");
			put("277Rg", "[277Rg]");
			put("278Rg", "[278Rg]");
			put("279Rg", "[279Rg]");
			put("280Rg", "[280Rg]");
			put("281Rg", "[281Rg]");
			put("282Rg", "[282Rg]");
			put("283Rg", "[283Rg]");
			put("277Cn", "[277Cn]");
			put("278Cn", "[278Cn]");
			put("279Cn", "[279Cn]");
			put("280Cn", "[280Cn]");
			put("281Cn", "[281Cn]");
			put("282Cn", "[282Cn]");
			put("283Cn", "[283Cn]");
			put("284Cn", "[284Cn]");
			put("285Cn", "[285Cn]");
			put("283Nh", "[283Nh]");
			put("284Nh", "[284Nh]");
			put("285Nh", "[285Nh]");
			put("286Nh", "[286Nh]");
			put("287Nh", "[287Nh]");
			put("285Fl", "[285Fl]");
			put("286Fl", "[286Fl]");
			put("287Fl", "[287Fl]");
			put("288Fl", "[288Fl]");
			put("289Fl", "[289Fl]");
			put("287Mc", "[287Mc]");
			put("288Mc", "[288Mc]");
			put("289Mc", "[289Mc]");
			put("290Mc", "[290Mc]");
			put("291Mc", "[291Mc]");
			put("289Lv", "[289Lv]");
			put("290Lv", "[290Lv]");
			put("291Lv", "[291Lv]");
			put("292Lv", "[292Lv]");
			put("291Ts", "[291Ts]");
			put("292Ts", "[292Ts]");
			put("293Ts", "[293Ts]");
			put("294Ts", "[294Ts]");
			put("293Og", "[293Og]");
		}
	};

	public final static String correctIsotopes( String _smiles ) {
  		Matcher m1 = PAT_ISOTOPE_ATOM.matcher( _smiles );
  		while ( m1.find() ) {
  			String isotopeStr = m1.group( 1 );
  			String atomStr = m1.group( 2 );
  			String addi = m1.group( 3 );
  			
  			if ( !ISOTOPES.containsKey( isotopeStr+atomStr ) ) {
  				String oldsmiles = _smiles;
  				if ( addi.length() >0 ) {
  					_smiles = _smiles.replaceAll( "\\["+isotopeStr, "[");
  				} else 
  					_smiles = _smiles.replaceAll( isotopeStr+atomStr, atomStr );
  			}
  		}
  		return _smiles;	
  	}
	
	public final static String correctAtoms( String _smiles ) {
  		boolean match = false;
  		Matcher m0 = PAT_0.matcher( _smiles );
  		while ( m0.find() ) {
  			_smiles = _smiles.replaceAll( "\\[se\\+]", "[Se+]" );
  			match = true;
  		}
  		Matcher m1 = PAT_1.matcher( _smiles );
  		while ( m1.find() ) {
  			_smiles = _smiles.replaceAll( "\\[se]", "[Se]" );
  			match = true;
  		}
  		Matcher m2 = PAT_2.matcher( _smiles );
  		while ( _smiles.contains("b") && !m2.find() ) {
  			_smiles = _smiles.replaceAll( "b", "B" );
  			match = true;
  		}
  		Matcher m3 = PAT_3.matcher( _smiles );
  		while ( m3.find() ) {
  			_smiles = _smiles.replaceAll( "\\[cl\\]", "[Cl]" );
  			match = true;
  		}
  		Matcher m4 = PAT_4.matcher( _smiles );
  		while ( m4.find() ) {
  			_smiles = _smiles.replaceAll( "o=", "O=" );
  			match = true;
  		}
  		Matcher m5 = PAT_5.matcher( _smiles );
  		while ( m5.find() ) {
  			_smiles = _smiles.replaceAll( "=o", "=O" );
  			match = true;
  		}
  		
  		return _smiles;
  	}

	private static StereoMolecule correctClass( StereoMolecule _mol ) {
		//System.out.println("class...");
		try {
			for ( int atom = 0, aCount = _mol.getAtoms(); atom < aCount; atom++ ) {
				String atomLabel = _mol.getAtomLabel( atom );
				if ( atomLabel.equals("Og") ) _mol.setAtomicNo(atom,0);
				if ( atomLabel.equals("B") ) {
					_mol.setAtomicNo(atom,0);
					int connectedBonds = _mol.getAllConnAtoms(atom);
					if (connectedBonds <3 ) return null;
				}
			} 
		} catch (Exception e) {
			System.out.println("error");
			return null;
		}
		return _mol;
	}
	
	private static boolean checkCompound( StereoMolecule _mol ) {
		boolean problem = false;
		try {
			for ( int atom = 0, aCount = _mol.getAtoms(); atom < aCount; atom++ ) {
				String atomLabel = _mol.getAtomLabel( atom );
				if ( atomLabel.equals("B") ) {
					_mol.setAtomicNo(atom,0);
					int connectedBonds = _mol.getAllConnAtoms(atom);
					if (connectedBonds <3 ) return true;
				}
			} 
		} catch (Exception e) {
			System.out.println("error");
			return true;
		}
		return problem;
	}
	
}